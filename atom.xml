<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Clarence的博客</title>
  <subtitle>Hard is the road of the world. Learning! -- Blog of Clarence</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://clarence-pan.github.io/"/>
  <updated>2017-07-05T03:30:06.651Z</updated>
  <id>http://clarence-pan.github.io/</id>
  
  <author>
    <name>Clarence Pan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【翻译】Monolog使用说明</title>
    <link href="http://clarence-pan.github.io/2017/07/05/monolog-usage-zh/"/>
    <id>http://clarence-pan.github.io/2017/07/05/monolog-usage-zh/</id>
    <published>2017-07-05T00:00:00.000Z</published>
    <updated>2017-07-05T03:30:06.651Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近项目中使用的 <a href="https://github.com/Seldaek/monolog" target="_blank" rel="external">Monolog</a> 出了点小问题，去翻其文档，发现居然只有英文的。趁业余时间，翻译一下吧。<br>以下是其<a href="https://github.com/Seldaek/monolog/blob/master/doc/01-usage.md" target="_blank" rel="external">使用说明</a>的<a href="https://github.com/Clarence-pan/monolog-zh-doc/blob/master/doc/01-usage.md" target="_blank" rel="external">中文翻译</a>。更多翻译内容见 <a href="https://github.com/Clarence-pan/monolog-zh-doc" target="_blank" rel="external">clarence-pan/monolog-zh-doc</a>.</p>
<h1 id="使用-Monolog"><a href="#使用-Monolog" class="headerlink" title="使用 Monolog"></a>使用 Monolog</h1><ul>
<li><a href="#安装">安装</a></li>
<li><a href="#核心概念">核心概念</a></li>
<li><a href="#日志级别">日志级别</a></li>
<li><a href="#配置一个日志服务">配置一个日志服务</a></li>
<li><a href="#为记录添加额外的数据">为记录添加额外的数据</a></li>
<li><a href="#使用通道">使用通道</a></li>
<li><a href="#自定义日志格式">自定义日志格式</a></li>
</ul>
<a id="more"></a>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Monolog 在 Packagist (<a href="http://packagist.org/packages/monolog/monolog" target="_blank" rel="external">monolog/monolog</a>) 上可用，并且可以通过 <a href="http://getcomposer.org/" target="_blank" rel="external">Composer</a> 安装:</p>
<pre><code class="bash">composer require monolog/monolog
</code></pre>
<p>如果你不使用 Composer, 那你可以从 GitHub 上获取代码，然后使用任何兼容 PSR-0 的自动加载器（比如<a href="https://github.com/symfony/ClassLoader" target="_blank" rel="external">Symfony2 ClassLoader 组件</a>）来加载 Monolog 的类</p>
<h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><p>每一个日志服务实例 (<code>Logger</code>) 都有一个通道（名称），并有一个处理器 (Handler)栈. 无论何时你添加一条 <a href="https://github.com/Clarence-pan/monolog-zh-doc/blob/master/doc/message-structure.md" target="_blank" rel="external">记录</a> 到对应的日志服务实例，这个处理器栈将被遍历一遍：每个处理器都将依次决定是否要处理这条记录，而如果要处理，则遍历结束（译注：类似DOM事件冒泡）。</p>
<p>这样子可以创建非常灵活的日志配置。比如一个 <code>StreamHandler</code> 可以把所有日志都写入磁盘，而上面加个<code>MailHandler</code> 可以把错误日志作为邮件发送出去。处理器还有一个 <code>$bubble</code> 属性定义了是否屏蔽某条记录或者处理了某条记录。在这个示例中，配置 <code>MailHandler</code> 的 <code>$bubble</code> 参数为 <code>false</code> 则意味着 <code>MailHandler</code> 将不会把自己已处理过的记录继续冒泡给 <code>StreamHandler</code>.</p>
<p>你可以创建许多日志服务实例(<code>Logger</code>)，每一个则定义一个通道（比如数据库、请求、路由...）。而每一个日志服务实例都可以组合各种各样的处理器，可以共享处理器也可以不共享。这个通道将会在日志中反映出来，从而允许你可以很容易地查看或者筛选记录。</p>
<p>每一个处理还会有一个格式化器（Formatter）。如果你没有配置一个，则一个有意义的默认的格式化器将被创建。格式化器用来规范化并格式化输入的记录，以便处理器能输出一些有用的信息。</p>
<p>不支持自定义的严重性级别。只支持使用<a href="http://tools.ietf.org/html/rfc5424" target="_blank" rel="external">RFC 5424</a>中定义的八个级别（调试/Debug、信息/Info、提示/Notice、警告/Warning、错误/Error、严重/Critical、警报/Alert、紧急/Emergency）来作为基本的筛选目的。不过，如果为了排序或者其他需要灵活性的使用场景，你可以添加加工程序（Processor）从而可以在（处理器）处理前添加额外的信息（标签、用户IP...）。</p>
<h2 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h2><p>Monolog 支持一下 <a href="http://tools.ietf.org/html/rfc5424" target="_blank" rel="external">RFC 5424</a> 中的日志级别：</p>
<ul>
<li><p><strong>调试/DEBUG</strong> (100): 详细的调试信息。</p>
</li>
<li><p><strong>信息/INFO</strong> (200): 有意义的事件，比如用户登录、SQL日志。</p>
</li>
<li><p><strong>提示/NOTICE</strong> (250): 正常但是值得注意的事件。</p>
</li>
<li><p><strong>警告/WARNING</strong> (300): 异常事件，但是并不是错误。比如使用了废弃了的API，错误地使用了一个API，以及其他不希望发生但是并非必要的错误。</p>
</li>
<li><p><strong>错误/ERROR</strong> (400): 运行时的错误，不需要立即注意到，但是需要被专门记录并监控到。</p>
</li>
<li><p><strong>严重/CRITICAL</strong> (500): 边界条件/危笃场景。比如应用组件不可用了，未预料到的异常。</p>
</li>
<li><p><strong>警报/ALERT</strong> (550): 必须立即采取行动。比如整个网站都挂了，数据库不可用了等。这种情况应该发送短信警报，并把你叫醒。</p>
</li>
<li><p><strong>紧急/EMERGENCY</strong> (600): 紧急请求：系统不可用了。</p>
</li>
</ul>
<h2 id="配置一个日志服务"><a href="#配置一个日志服务" class="headerlink" title="配置一个日志服务"></a>配置一个日志服务</h2><p>这里有一个基本的配置，可以记录日志到文件，并在 <code>DEBUG</code> 级别下记录到 firephp 中:</p>
<pre><code class="php">&lt;?php

use Monolog\Logger;
use Monolog\Handler\StreamHandler;
use Monolog\Handler\FirePHPHandler;

// 创建日志服务
$logger = new Logger(&#39;my_logger&#39;);

// 添加一些处理器
$logger-&gt;pushHandler(new StreamHandler(__DIR__.&#39;/my_app.log&#39;, Logger::DEBUG));
$logger-&gt;pushHandler(new FirePHPHandler());

// 现在你就可以用日志服务了
$logger-&gt;info(&#39;My logger is now ready&#39;);
</code></pre>
<p>解释一下。第一步是创建日志服务实例，这个实例后将在代码中用到。唯一的参数是通道的名称，它在你有多个日志服务实例的时候很有用。（更多详情参见下面）</p>
<p>这个日志服务实例自己是不是知道如何处理一条日志记录的。它把记录代理给了一些处理器。上面的代码中注册了两个处理器到栈中，以便允许使用两种不同的方式来处理日志记录。</p>
<p>注意，<code>FirePHPHandler</code> 是被先调用的，因而它被添加到了栈顶。这允许你临时添加一个禁止冒泡的处理器从而允许你覆盖其他配置的日志（处理器）。</p>
<blockquote>
<p>如果你单独使用 Monolog, 并且在寻找一种简单的方式来配置许多处理器，那可以用<br><a href="https://github.com/theorchard/monolog-cascade" target="_blank" rel="external">theorchard/monolog-cascade</a> 。<br>它可以帮你使用PHP数组、YAML或者JSON来构建复杂的日志配置。</p>
</blockquote>
<h2 id="为记录添加额外的数据"><a href="#为记录添加额外的数据" class="headerlink" title="为记录添加额外的数据"></a>为记录添加额外的数据</h2><p>Monolog 提供了两种不同的方式来为简单的文本消息增加额外的信息</p>
<h3 id="使用上下文-context"><a href="#使用上下文-context" class="headerlink" title="使用上下文(context)"></a>使用上下文(<code>context</code>)</h3><p>第一种方式是使用上下文（<code>context</code>），这允许你在传递记录的时候传递一个数组格式的数据：</p>
<pre><code class="php">&lt;?php

$logger-&gt;info(&#39;Adding a new user&#39;, array(&#39;username&#39; =&gt; &#39;Seldaek&#39;));
</code></pre>
<p>简单的处理器（比如<code>StreamHandler</code>）将只是把数组转换成字符串。而复杂的处理器则可以利用上下文的优点（如 FirePHP 则将以一种优美的方式显示数组）。</p>
<h3 id="使用加工程序-Processor"><a href="#使用加工程序-Processor" class="headerlink" title="使用加工程序(Processor)"></a>使用加工程序(<code>Processor</code>)</h3><p>第二种方式是使用加工程序来为所有的记录添加额外数据。加工程序可以是任何可以调用的函数。<br>加工程序接收日志记录作为参数，并且需要在修改了<code>extra</code>字段后再返回日志记录。让我们来写一个添加一些假数据的加工程序：</p>
<pre><code class="php">&lt;?php

$logger-&gt;pushProcessor(function ($record) {
    $record[&#39;extra&#39;][&#39;dummy&#39;] = &#39;Hello world!&#39;;

    return $record;
});
</code></pre>
<p>Monolog提供了一些内置的加工程序，你可以在你的项目中使用它们。请参见<a href="https://github.com/clarence-pan/monolog-zh-doc/blob/master/doc/02-handlers-formatters-processors.md#加工程序" target="_blank" rel="external">对应的章节</a>.</p>
<blockquote>
<p>小技巧：加工程序可以被注册到一个特定的处理器上而不是直接在日志服务实例上，从而可以只在对应的处理器上生效。</p>
</blockquote>
<h2 id="使用通道"><a href="#使用通道" class="headerlink" title="使用通道"></a>使用通道</h2><p>通道是一种非常棒的方式来区分是应用的哪个部分的日志被记录下来的。这通常在大型项目中非常有用（而且被Symfony2的MonologBundle所使用）。</p>
<p>假设有两个日志服务实例共享了一个处理器，这个处理器将日志写入单个日志文件。通道则将允许你来区分是哪个日志服务实例记录了哪条日志。你可以很简单地通过通道来筛选日志。</p>
<pre><code class="php">&lt;?php

use Monolog\Logger;
use Monolog\Handler\StreamHandler;
use Monolog\Handler\FirePHPHandler;

// 创建一些处理器
$stream = new StreamHandler(__DIR__.&#39;/my_app.log&#39;, Logger::DEBUG);
$firephp = new FirePHPHandler();

// 创建应用的主要日志服务实例
$logger = new Logger(&#39;my_logger&#39;);
$logger-&gt;pushHandler($stream);
$logger-&gt;pushHandler($firephp);

// 使用另外的通道来创建安全相关的日志服务示例
$securityLogger = new Logger(&#39;security&#39;);
$securityLogger-&gt;pushHandler($stream);
$securityLogger-&gt;pushHandler($firephp);

// 或者克隆第一个，只是改变下通道
$securityLogger = $logger-&gt;withName(&#39;security&#39;);
</code></pre>
<h2 id="自定义日志格式"><a href="#自定义日志格式" class="headerlink" title="自定义日志格式"></a>自定义日志格式</h2><p>在Monolog中，可以很简单地来自定义日志的格式，无论是写入文件、套接字、邮件、数据库还是其他处理器。大多数处理器都是用 <code>$record[&#39;formatted&#39;]</code> 这个值来自动写入日志设备。这个值依赖格式化器的配置。你可以选择预定义的格式化器类，也可以自己写一个（比如一个可读的多行文本文件）。</p>
<p>想要配置一个预定义的格式化器类，可以直接把它设置为处理器的字段：</p>
<pre><code class="php">// 默认的日期格式是 &quot;Y-m-d H:i:s&quot;
$dateFormat = &quot;Y n j, g:i a&quot;;
// 默认的输出格式是 &quot;[%datetime%] %channel%.%level_name%: %message% %context% %extra%\n&quot;
$output = &quot;%datetime% &gt; %level_name% &gt; %message% %context% %extra%\n&quot;;
// 最后创建一个格式化器
$formatter = new LineFormatter($output, $dateFormat);

// 创建一个处理器
$stream = new StreamHandler(__DIR__.&#39;/my_app.log&#39;, Logger::DEBUG);
$stream-&gt;setFormatter($formatter);

// 将其绑定到日志服务对象上
$securityLogger = new Logger(&#39;security&#39;);
$securityLogger-&gt;pushHandler($stream);
</code></pre>
<p>// 你还可以在多个处理器之间复用同一个格式化器，并且在多个日志服务实例间共享这些处理器。</p>
<p><a href="https://github.com/Clarence-pan/monolog-zh-doc/blob/master/doc/02-handlers-formatters-processors.md" target="_blank" rel="external">处理器、格式化器和加工程序</a> &rarr;</p>
<hr>
<blockquote>
<p>说明：本文首发地址：<a href="https://www.clarencep.com/2017/07/05/monolog-usage-zh/" target="_blank" rel="external">https://www.clarencep.com/2017/07/05/monolog-usage-zh/</a>，转载请注明出处，如有翻译得不当之处欢迎指正。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近项目中使用的 &lt;a href=&quot;https://github.com/Seldaek/monolog&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Monolog&lt;/a&gt; 出了点小问题，去翻其文档，发现居然只有英文的。趁业余时间，翻译一下吧。&lt;br&gt;以下是其&lt;a href=&quot;https://github.com/Seldaek/monolog/blob/master/doc/01-usage.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用说明&lt;/a&gt;的&lt;a href=&quot;https://github.com/Clarence-pan/monolog-zh-doc/blob/master/doc/01-usage.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;中文翻译&lt;/a&gt;。更多翻译内容见 &lt;a href=&quot;https://github.com/Clarence-pan/monolog-zh-doc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;clarence-pan/monolog-zh-doc&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&quot;使用-Monolog&quot;&gt;&lt;a href=&quot;#使用-Monolog&quot; class=&quot;headerlink&quot; title=&quot;使用 Monolog&quot;&gt;&lt;/a&gt;使用 Monolog&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#安装&quot;&gt;安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#核心概念&quot;&gt;核心概念&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#日志级别&quot;&gt;日志级别&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#配置一个日志服务&quot;&gt;配置一个日志服务&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#为记录添加额外的数据&quot;&gt;为记录添加额外的数据&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#使用通道&quot;&gt;使用通道&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#自定义日志格式&quot;&gt;自定义日志格式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://clarence-pan.github.io/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://clarence-pan.github.io/tags/PHP/"/>
    
      <category term="Monolog" scheme="http://clarence-pan.github.io/tags/Monolog/"/>
    
      <category term="Translations" scheme="http://clarence-pan.github.io/tags/Translations/"/>
    
  </entry>
  
  <entry>
    <title>密码存储中MD5的安全问题与替代方案</title>
    <link href="http://clarence-pan.github.io/2017/05/31/safe-way-to-store-password/"/>
    <id>http://clarence-pan.github.io/2017/05/31/safe-way-to-store-password/</id>
    <published>2017-05-31T00:00:00.000Z</published>
    <updated>2017-07-05T03:30:06.663Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>md5安全吗？有多么地不安全？如何才能安全地存储密码？...</p>
</blockquote>
<a id="more"></a>
<h1 id="md5安全吗？"><a href="#md5安全吗？" class="headerlink" title="md5安全吗？"></a>md5安全吗？</h1><p>经过各种安全事件后，很多系统在存放密码的时候不会直接存放明文密码了，大都改成了存放了 md5 加密（hash）后的密码，可是这样真的安全吗？</p>
<p><a href="https://gist.github.com/Clarence-pan/5f0c54f94234799f5236fa1c2405133f" target="_blank" rel="external">这儿有个脚本来测试下MD5的速度</a>, 测试结果:</p>
<pre><code>[root@f4d5945f1d7c tools]# php speed-of-md5.php
Array
(
    [rounds] =&gt; 100
    [times of a round] =&gt; 1000000
    [avg] =&gt; 0.23415904045105
    [max] =&gt; 0.28906106948853
    [min] =&gt; 0.21188998222351
)
</code></pre><p>有没有发现一个问题：MD5速度太快了，导致很容易进行暴力破解.</p>
<p>简单计算一下：</p>
<pre><code>&gt; Math.pow(10, 6) / 1000000 * 0.234
0.234
&gt; Math.pow(36, 6) / 1000000 * 0.234 / 60
8.489451110400001
&gt; Math.pow(62, 6) / 1000000 * 0.234 / 60 / 60
3.69201531296
</code></pre><ol>
<li>使用6位纯数字密码，破解只要0.234秒！</li>
<li>使用6位数字+小写字母密码，破解只要8.49分钟！</li>
<li>使用6位数字+大小写混合字母密码，破解只要3.69个小时！</li>
</ol>
<p>当然，使用长一点的密码会显著提高破解难度：</p>
<pre><code>&gt; Math.pow(10, 8) / 1000000 * 0.234
23.400000000000002
&gt; Math.pow(36, 8) / 1000000 * 0.234 / 60 / 60 / 24
7.640505999359999
&gt; Math.pow(62, 8) / 1000000 * 0.234 / 60 / 60 / 24 / 365
1.6201035231755982
</code></pre><ol>
<li>使用8位纯数字密码，破解要23.4秒！</li>
<li>使用8位数字+小写字母密码，破解要7.64小时！</li>
<li>使用8位数字+大小写混合字母密码，破解要1.62年！</li>
</ol>
<p>但是，别忘了，这个速度只是用PHP这个解释型语言在笔者的弱鸡个人电脑（i5-4460 CPU 3.20GHz）上跑出来的，还只是利用了一个线程一个CPU核心。若是放到最新的 Xeon E7 v4系列CPU的服务器上跑，充分利用其48个线程，并使用C语言来重写下测试代码，很容易就能提升个几百上千倍速度。那么即使用8位数字+大小写混合字母密码，破解也只要14小时！</p>
<p>更何况，很多人的密码都是采用比较有规律的字母或数字，更能降低暴力破解的难度... 如果没有加盐或加固定的盐，那么彩虹表破解就更easy了...</p>
<h1 id="那么如何提升密码存储的安全性呢？bcrypt"><a href="#那么如何提升密码存储的安全性呢？bcrypt" class="headerlink" title="那么如何提升密码存储的安全性呢？bcrypt!"></a>那么如何提升密码存储的安全性呢？bcrypt!</h1><p>提升安全性就是提升密码的破解难度，至少让暴力破解难度提升到攻击者无法负担的地步。（当然用户密码的长度当然也很重要，建议至少8位，越长越安全）</p>
<p>这里不得不插播一句：PHP果然是世界上最好的语言 -- 标准库里面已经给出了解决方案。</p>
<p>PHP 5.5 的版本中加入了 <a href="http://php.net/manual/zh/book.password.php" target="_blank" rel="external"><code>password_xxx</code> 系列函数</a>, 而对之前的版本，也有兼容库可以用：<a href="https://github.com/ircmaxell/password_compat" target="_blank" rel="external">password_compat</a>.<br>在这个名叫“密码散列算法”的核心扩展中提供了一系列简洁明了的对密码存储封装的函数。简单介绍下：</p>
<ol>
<li><code>password_hash</code> 是对密码进行加密（hash），目前默认用（也只能用）bcrypt算法，相当于一个加强版的md5函数</li>
<li><code>password_verify</code> 是一个验证密码的函数，内部采用的安全的字符串比较算法，可以预防基于时间的攻击, 相当于 <code>$hashedPassword === md5($inputPassword)</code></li>
<li><code>password_needs_rehash</code> 是判断是否需要升级的一个函数，这个函数厉害了，下面再来详细讲</li>
</ol>
<p><code>password_hash</code> 需要传入一个算法，现在默认和可以使用的都只有bcrypt算法，这个算法是怎么样的一个算法呢？为什么PHP标准库里面会选择bcrypt呢?</p>
<p>bcrypt是基于 Blowfish 算法的一种专门用于密码哈希的算法，由 Niels Provos 和 David Mazieres 设计的。这个算法的特别之处在于，别的算法都是追求快，这个算法中有一个至关重要的参数：cost. 正如其名，这个值越大，耗费的时间越长，而且是指数级增长 -- 其加密流程中有一部分是这样的：</p>
<pre><code>EksBlowfishSetup(cost, salt, key)
    state &lt;- InitState()
    state &lt;- ExpandKey(state, salt, key)
    repeat (2^cost)                         // &quot;^&quot;表示指数关系
        state &lt;- ExpandKey(state, 0, key)
        state &lt;- ExpandKey(state, 0, salt)
    return state
</code></pre><p>比如下面是笔者的一次测试结果（个人弱机PC, i5-4460 CPU 3.20GHz） ：</p>
<pre><code>      cost       time
         8   0.021307
         9   0.037150
        10   0.079283
        11   0.175612
        12   0.317375
        13   0.663080
        14   1.330451
        15   2.245152
        16   4.291169
        17   8.318790
        18  16.472902
        19  35.146999
</code></pre><p>附：<a href="https://gist.github.com/Clarence-pan/4c05fd2ea3f31722fa6910bc82976c08" target="_blank" rel="external">测试代码</a></p>
<p>这个速度与md5相比简直是蜗牛与猎豹的差别 -- 即使按照cost=8, 一个8位的大小写字母+数字的密码也要14万年才能暴力破解掉，更何况一般服务器都会至少设置为10或更大的值（那就需要54万年或更久了）。</p>
<p>显然，cost不是越大越好，越大的话会越占用服务器的CPU，反而容易引起DOS攻击。建议根据服务器的配置和业务的需求设置为10~12即可。最好同时对同一IP同一用户的登录尝试次数做限制，预防DOS攻击。</p>
<h1 id="一个安全地存储密码的方案"><a href="#一个安全地存储密码的方案" class="headerlink" title="一个安全地存储密码的方案"></a>一个安全地存储密码的方案</h1><p>总上所述，一个安全地存储密码的方案应该是<a href="https://gist.github.com/Clarence-pan/cf4e7afceb32da1020f8705efff871b2" target="_blank" rel="external">这样子的</a>：（直接放代码吧）</p>
<pre><code class="php">class User extends BaseModel
{
    const PASSWORD_COST = 11; // 这里配置bcrypt算法的代价，根据需要来随时升级
    const PASSWORD_ALGO = PASSWORD_BCRYPT; // 默认使用（现在也只能用）bcrypt

    /**
    * 验证密码是否正确
    *
    * @param string $plainPassword 用户密码的明文
    * @param bool  $autoRehash    是否自动重新计算下密码的hash值（如果有必要的话）
    * @return bool
    */
    public function verifyPassword($plainPassword, $autoRehash = true)
    {
        if (password_verify($plainPassword, $this-&gt;password)) {
            if ($autoRehash &amp;&amp; password_needs_rehash($this-&gt;password, self::PASSWORD_ALGO, [&#39;cost&#39; =&gt; self::PASSWORD_COST])) {
                $this-&gt;updatePassword($plainPassword);
            }

            return true;
        }

        return false;
    }

    /**
    * 更新密码
    *
    * @param string $newPlainPassword
    */
    public function updatePassword($newPlainPassword)
    {
        $this-&gt;password = password_hash($newPlainPassword, self::PASSWORD_ALGO, [&#39;cost&#39; =&gt; self::PASSWORD_COST]);
        $this-&gt;save();
    }
}
</code></pre>
<p>这样子，在用户注册或修改密码的时候就调用 <code>$user-&gt;updatePassword()</code> 来设置密码，而登录的时候就调用 <code>$user-&gt;verifyPassword()</code> 来验证下密码是否正确。<br>当硬件性能提升到一定程度，而cost=11无法满足安全需求的时候，则修改下 <code>PASSWORD_COST</code> 的值即可无缝升级，让存放的密码更安全。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;md5安全吗？有多么地不安全？如何才能安全地存储密码？...&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Security" scheme="http://clarence-pan.github.io/categories/Security/"/>
    
    
      <category term="PHP" scheme="http://clarence-pan.github.io/tags/PHP/"/>
    
      <category term="Security" scheme="http://clarence-pan.github.io/tags/Security/"/>
    
      <category term="md5" scheme="http://clarence-pan.github.io/tags/md5/"/>
    
      <category term="password" scheme="http://clarence-pan.github.io/tags/password/"/>
    
  </entry>
  
  <entry>
    <title>无需安装 vsftpd , 直接使用 FTP 来管理 docker 容器中的文件</title>
    <link href="http://clarence-pan.github.io/2017/04/15/ftp-server-for-docker/"/>
    <id>http://clarence-pan.github.io/2017/04/15/ftp-server-for-docker/</id>
    <published>2017-04-15T10:46:59.000Z</published>
    <updated>2017-07-05T03:30:06.651Z</updated>
    
    <content type="html"><![CDATA[<p>无图无真相，先放个效果图：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://ww1.sinaimg.cn/large/bf5f3c73gy1fen656jywdg20tq0j1u0x.gif" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>使用 docker 来跑一些服务很方便，但是有的时候想管理容器里面的文件却很麻烦 -- 一般常规做法有3种：</p>
<ol>
<li>通过数据卷或数据卷容器的方式</li>
<li>启动容器的时候时候启动 vsftpd 或者 sshd 等服务，并开启端口映射，然后通过 ftp/sftp 连上去管理</li>
<li>进入容器的终端，通过命令行管理</li>
</ol>
<p>但是这些做法都有一定的缺陷和不便：</p>
<p>1和2都是需要在启动容器的时候做一些配置，如果容器已经启动了就歇菜了。而且2需要额外的端口映射，占用主机的端口。3的做法比较 geek ，而容器中通常只有基础的 shell 工具，没有一个熟悉的工具套件环境，操作比较费时费力，不够直观。</p>
<h2 id="解决方案：-ftp-server-for-docker"><a href="#解决方案：-ftp-server-for-docker" class="headerlink" title="解决方案： ftp-server-for-docker"></a>解决方案： <a href="https://www.npmjs.com/package/ftp-server-for-docker" target="_blank" rel="external">ftp-server-for-docker</a></h2><p>我所能想到比较好的解决方案是综合2和3的方案，构建一个不需要额外的启动配置的 <code>FTP</code> 服务器：<a href="https://www.npmjs.com/package/ftp-server-for-docker" target="_blank" rel="external">ftp-server-for-docker</a></p>
<blockquote>
<p>这是一个 docker 专用的 FTP 服务器 - 允许通过 FTP 协议来访问 docker 容器中的文件（即使 docker 容器已经启动了也可以的哟）。基于 linux shell <code>sh</code> 和 docker 的 <code>docker cp</code>.</p>
</blockquote>
<h3 id="如何安装"><a href="#如何安装" class="headerlink" title="如何安装"></a>如何安装</h3><p>推荐使用 <a href="https://www.npmjs.com/" target="_blank" rel="external">npm</a> 安装:</p>
<pre><code>npm install -g ftp-server-for-docker
</code></pre><h3 id="如何运行"><a href="#如何运行" class="headerlink" title="如何运行"></a>如何运行</h3><h4 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h4><p>比如说在 <code>localhost:21</code> 上启动 FTP 服务器，并运行 <code>test</code> 用户通过密码 <code>123456</code> 来访问：</p>
<pre><code>$ ftp-server-for-docker -H localhost -p 21 --users test:123456
FtpServer start listening at localhost:21
</code></pre><h4 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h4><p>使用 <code>ftp-server-for-docker</code> 来浏览容器 <code>wordpress</code> 中的文件: </p>
<p><img src="https://raw.githubusercontent.com/Clarence-pan/node-ftp-server-for-docker/master/screenshots/explore-wordpress.gif" alt=""></p>
<h3 id="查看命令行帮助"><a href="#查看命令行帮助" class="headerlink" title="查看命令行帮助"></a>查看命令行帮助</h3><p>想要知道更多使用方法，可以查看命令行帮助：</p>
<pre><code>$ ftp-server-for-docker --help
Usage: ftp-server-for-docker [options]

Options:
  --port, -p       Specify which port to listen on(default is 21)       [number]
  --host, -H       Specify which host to bind(default is 0.0.0.0)       [string]
  --annoymous, -a  Whether enable annoymous user                       [boolean]
  --users, -u      Specify users (in form like username:password, can be
                   multiple)                                             [array]
  --config, -c     Specify which configuration file to use
  --debug          Whether enable debug mode                           [boolean]
  -h, --help       Show help                                           [boolean]
  -?, --help       Show help                                           [boolean]

Examples:
  ftp-server-for-docker -h localhost -p 21  Start the FTP Server on
  -u test:123                               localhost:21, allow user `test` to
                                            access.
</code></pre><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>这个 FTP 服务器网络方面采用了比较成熟的 <a href="https://www.npmjs.com/package/ftpd" target="_blank" rel="external">ftpd</a> ，而文件系统模块替换成了新写的 <a href="https://github.com/Clarence-pan/node-ftp-server-for-docker/blob/master/src/docker-fs.ts" target="_blank" rel="external">Docker FS</a>. </p>
<p>文件系统的基本操作（<code>stat</code>/<code>readdir</code>/<code>open</code>/<code>unlink</code>...）都是通过 <code>docker exec</code>、<code>docker cp</code> 和临时文件来完成，比如：</p>
<ul>
<li><code>stat</code> 是通过 <code>docker exec &lt;container&gt; stat xxx</code> 来查看文件状态</li>
<li><code>readdir</code> 是通过 <code>docker exec &lt;container&gt; ls -1 --color=none</code> 来列出目录下的文件</li>
<li><code>open</code> 是通过 <code>docker cp &lt;container&gt;:&lt;path&gt; &lt;temp-path&gt;</code> 把容器中的文件拷贝到临时文件中，然后再读取的</li>
</ul>
<p>具体实现流程参见<a href="https://github.com/Clarence-pan/node-ftp-server-for-docker/blob/master/src/docker-fs.ts" target="_blank" rel="external">源代码</a></p>
<h2 id="关于-TypeScript"><a href="#关于-TypeScript" class="headerlink" title="关于 TypeScript"></a>关于 TypeScript</h2><p>这个项目中的主要源代码都使用 <a href="https://www.typescriptlang.org/" target="_blank" rel="external">TypeScript</a> -- 都是在 <code>src/*.ts</code> 中，通过 <code>tsc</code> 编译后生成成 <code>lib/*.js</code>，最终npm打包的只有 <code>lib/*.js</code> 没有 <code>src/*.ts</code>. </p>
<p>这是我第一次使用 <a href="https://www.typescriptlang.org/" target="_blank" rel="external">TypeScript</a>. TypeScript 的强类型带来很多方便，也带来很多不便。综合而言，TypeScript 让我想起了曾经使用过的 C#，结合 Visual Studio Code 来用还是利大于弊。TypeScript 能在编辑和编译的时候就检查出很多类型问题，而且智能提示确实很棒。</p>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol>
<li>FileZilla 无法列出目录结构 -- 可以尝试配置传输模式为 <code>主动模式</code>，被动模式还有问题，正在解决ing...</li>
<li>中文目录显示乱码 -- 已知问题，正在解决ing...</li>
</ol>
<p>如有其他问题，欢迎来<a href="https://github.com/Clarence-pan/node-ftp-server-for-docker/issues/new" target="_blank" rel="external">提 issue </a>, 当然更欢迎 <a href="https://github.com/Clarence-pan/node-ftp-server-for-docker" target="_blank" rel="external">fork</a> 并解决后来提 PR.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;无图无真相，先放个效果图：&lt;/p&gt;
&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div
    
    </summary>
    
      <category term="docker" scheme="http://clarence-pan.github.io/categories/docker/"/>
    
    
      <category term="node.js" scheme="http://clarence-pan.github.io/tags/node-js/"/>
    
      <category term="ftp" scheme="http://clarence-pan.github.io/tags/ftp/"/>
    
      <category term="docker" scheme="http://clarence-pan.github.io/tags/docker/"/>
    
      <category term="container" scheme="http://clarence-pan.github.io/tags/container/"/>
    
      <category term="TypeScript" scheme="http://clarence-pan.github.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>`express` 框架中的参数小记</title>
    <link href="http://clarence-pan.github.io/2017/04/01/a-note-to-express-params/"/>
    <id>http://clarence-pan.github.io/2017/04/01/a-note-to-express-params/</id>
    <published>2017-04-01T00:00:00.000Z</published>
    <updated>2017-07-05T03:30:06.651Z</updated>
    
    <content type="html"><![CDATA[<p>注意：<code>req.params</code> 只有在参数化的路径中的参数。查询字符串中的参数要用 <code>req.query</code>.</p>
<p>比如:</p>
<a id="more"></a>
<pre><code class="js">// server.js:
app.post(&#39;/user/:id&#39;, function(req, res){
    console.log(&#39;req.params: &#39;, req.params)
    console.log(&#39;req.query: &#39;, req.query)
    console.log(&#39;req.body: &#39;, req.body)
})
</code></pre>
<pre><code>// HTTP request:
POST /user/123?foo=1&amp;bar=2
Content-Type: application/x-www-form-urlencoded

aaa=1&amp;bbb=2
</code></pre><p>这样的请求，应该是要用 <code>req.query.foo</code> 和 <code>req.query.bar</code> 来获取 foo 和 bar 的值，最终打印出如下:</p>
<pre><code class="text">req.params:  { id: &#39;123&#39; }
req.query:  { foo: &#39;1&#39;, bar: &#39;2&#39; }
req.body:  { aaa: &#39;1&#39;, bbb: &#39;2&#39; }
</code></pre>
<h2 id="关于-req-body"><a href="#关于-req-body" class="headerlink" title="关于 req.body"></a>关于 <code>req.body</code></h2><p>此外，<code>express</code> 框架本身是没有解析 <code>req.body</code> 的 -- 如果打印出来 <code>req.body: undefined</code>则说明没有安装解析 <code>req.body</code> 的插件：</p>
<p>为了解析 <code>req.body</code> 一般可以安装 <code>body-parser</code> 这个插件：</p>
<pre><code>
// 假设 `app` 是 `express` 的实例：

const bodyParser = require(&#39;body-parser&#39;)

// 在所有路由前插入这个中间件：

app.use(bodyParser.urlencoded())
</code></pre><p>这样就可以了。</p>
<p><code>bodyParser.urlencoded()</code>是HTML中默认的查询字符串形式的编码,即<code>application/x-www-form-urlencoded</code>. 如果需要解析其他格式的，则需要分别加入其他格式的中间件，比如：</p>
<ul>
<li><code>bodyParser.json()</code> 支持JSON格式（<code>application/json</code>）</li>
<li><code>bodyParser.raw()</code> 将会把 <code>req.body</code> 置为一个 <code>Buffer</code> (Content-Type：<code>application/octet-stream</code>)</li>
<li><code>bodyParser.text()</code> 将会把 <code>req.body</code> 置为一个 <code>string</code> (Content-Type: <code>text/plain</code>)</li>
</ul>
<p>然而上传文件用的 <code>multipart/form-data</code> 格式却没有被 <code>bodyParser</code> 所支持，需要使用 <code>busboy</code> 之类的其他中间件。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;注意：&lt;code&gt;req.params&lt;/code&gt; 只有在参数化的路径中的参数。查询字符串中的参数要用 &lt;code&gt;req.query&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;比如:&lt;/p&gt;
    
    </summary>
    
      <category term="express" scheme="http://clarence-pan.github.io/categories/express/"/>
    
    
      <category term="node.js" scheme="http://clarence-pan.github.io/tags/node-js/"/>
    
      <category term="express" scheme="http://clarence-pan.github.io/tags/express/"/>
    
  </entry>
  
  <entry>
    <title>如何优雅地使用 VSCode 来编辑 vue 文件？</title>
    <link href="http://clarence-pan.github.io/2017/03/18/edit-vue-file-via-vscode/"/>
    <id>http://clarence-pan.github.io/2017/03/18/edit-vue-file-via-vscode/</id>
    <published>2017-03-18T00:00:00.000Z</published>
    <updated>2017-07-05T03:30:06.651Z</updated>
    
    <content type="html"><![CDATA[<p>最近有个项目使用了 <a href="http://cn.vuejs.org" target="_blank" rel="external">Vue.js</a> ，本来一直使用的是 PHPStorm 来进行开发，可是遇到了很多问题。</p>
<p>后来，果断放弃收费的 PHPStorm ，改用 <a href="https://code.visualstudio.com" target="_blank" rel="external">vscode (Visual Stdio Code)</a>.<br>当然 vscode 对 vue 也不是原生支持的，今天来扒一扒如何配置 vscode 以便优雅地编辑 vue 文件</p>
<a id="more"></a>
<h2 id="先来扒一扒使用-PHPStorm-遇到的问题："><a href="#先来扒一扒使用-PHPStorm-遇到的问题：" class="headerlink" title="先来扒一扒使用 PHPStorm 遇到的问题："></a>先来扒一扒使用 PHPStorm 遇到的问题：</h2><ol>
<li>vue文件虽然可以通过插件来解决高亮问题，但是 <code>&lt;script&gt;</code> 标签中的 ES6 代码的识别老是出问题，箭头函数有的时候能正确识别，有的时候会报错</li>
<li>无法正确识别 vue 文件中的 jsx 语法</li>
<li>无法正确识别和高亮 vue 文件 <code>&lt;style&gt;</code> 标签中使用的 less 语法</li>
<li>vue文件中 <code>&lt;template&gt;</code> 部分使用了大量的自定义标签（自定义组件）和自定义属性，会报一堆 warning</li>
<li>经常性卡死</li>
<li>webpack实时编译的错误不能直接展示在代码编辑器内，还得自己到控制台中查看</li>
</ol>
<h2 id="如何安装-vscode"><a href="#如何安装-vscode" class="headerlink" title="如何安装 vscode"></a>如何安装 vscode</h2><p>很简单，传送门：<a href="https://code.visualstudio.com/Download" target="_blank" rel="external">官网下载安装</a></p>
<h2 id="第一步，要支持-vue-文件的基本语法高亮"><a href="#第一步，要支持-vue-文件的基本语法高亮" class="headerlink" title="第一步，要支持 vue 文件的基本语法高亮"></a>第一步，要支持 vue 文件的基本语法高亮</h2><p>这里，我试过好3个插件： <code>vue</code>, <code>VueHelper</code> 和 <code>vetur</code> ，最终选择使用 <code>vetur</code> 。 </p>
<p><img src="http://ww1.sinaimg.cn/large/bf5f3c73gy1fdqyjqcm8ej20af026mx2.jpg" alt=""></p>
<p>安装插件： <code>Ctrl + P</code> 然后输入 <code>ext install vetur</code> 然后回车点安装即可。</p>
<p>p.s: vscode 的插件安装比 PHPStorm 的插件安装更快捷方便，安装完成后还不用重启整个程序，只要重新加载下工作区窗口就可以了。</p>
<p>安装完 <code>vetur</code> 后还需要加上这样一段配置下：</p>
<pre><code>&quot;emmet.syntaxProfiles&quot;: {
  &quot;vue-html&quot;: &quot;html&quot;,
  &quot;vue&quot;: &quot;html&quot;
}
</code></pre><p>这时可以打开一个vue文件试试，注意下右下角状态栏是否正确识别为 <code>vue</code> 类型：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://ww1.sinaimg.cn/large/bf5f3c73gy1fdqyc1kw6aj203g00zjr5.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>如果被识别为 <code>text</code> 或 <code>html</code> ，则记得要点击切换下。</p>
<h2 id="第二步，要支持-vue-文件的-ESLint"><a href="#第二步，要支持-vue-文件的-ESLint" class="headerlink" title="第二步，要支持 vue 文件的 ESLint"></a>第二步，要支持 vue 文件的 ESLint</h2><p>可能还有人会问为什么要 ESLint ？没有 lint 的代码虽然也可能可以正确运行，但是 lint 作为编译前的一道检测成本更小，而且更快。此外， ESLint 还有很多规范是帮助我们写出更加优雅而不容易出错的代码的。</p>
<p>jshint 本来也是个不错的选择，但是 ESLint 对 jsx 的支持让我还是选择了 ESLint.</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://ww1.sinaimg.cn/large/bf5f3c73gy1fdqykn8cbzj20ah01v747.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>安装插件： <code>Ctrl + P</code> 然后输入 <code>ext install eslint</code> 然后回车点安装即可。</p>
<p>ESLint 不是安装后就可以用的，还需要一些环境和配置：</p>
<p>首先，需要全局的 ESLint , 如果没有安装可以使用 <code>npm install -g eslint</code> 来安装。</p>
<p>其次，vue文件是类 HTML 的文件，为了支持对 vue 文件的 ESLint ，需要 <code>eslint-plugin-html</code> 这个插件。可以使用 <code>npm install -g eslint-plugin-html</code> 来安装</p>
<p>接着，安装了 HTML 插件后，还需要在 vscode 中配置下 ESLint：</p>
<pre><code>    &quot;eslint.validate&quot;: [
        &quot;javascript&quot;,
        &quot;javascriptreact&quot;,
        &quot;html&quot;,
        &quot;vue&quot;
    ],
    &quot;eslint.options&quot;: {
        &quot;plugins&quot;: [&quot;html&quot;]
    },
</code></pre><p>最后，别忘了在项目根目录下创建 <code>.eslintrc.json</code> , 如果还没创建，还可以使用下面快捷命令来创建：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://ww1.sinaimg.cn/large/bf5f3c73ly1fdqyw5fnm6j20bv031q2v.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>这样一来 vue 中写的 js 代码也能正确地被 lint 了。</p>
<p>要是不小心少个括号之类的都可以有对应的报错:</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://ww1.sinaimg.cn/large/bf5f3c73gy1fdqyrypdw5j20hl080aao.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>多余 import 也都能报错:</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://ww1.sinaimg.cn/large/bf5f3c73gy1fdqytvpo7yj20hg0ckdhd.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>还是蛮智能的。</p>
<h2 id="第三步，配置构建任务"><a href="#第三步，配置构建任务" class="headerlink" title="第三步，配置构建任务"></a>第三步，配置构建任务</h2><p>vue 项目的构建我选择用 webpack ，不过，并不是直接使用命令行下的 webpack 而是使用了 webpack 的 API 写的 node 脚本。 脚本主要有两个，一个是 <code>build/bin/build.js</code> 另一个是 <code>build/bin/watch.js</code> 分别是单次构建和实时构建。</p>
<p>于是乎，对应 vscode 中的 tasks 也是有两个： <code>build</code> 和 <code>watch</code> ，简单配置如下：</p>
<pre><code>{
    // See https://go.microsoft.com/fwlink/?LinkId=733558
    // for the documentation about the tasks.json format
    // use `Ctrl+P` and type `task` + SPACE + &lt;taskName&gt; to run a task
    &quot;version&quot;: &quot;0.1.0&quot;,
    &quot;tasks&quot;: [
        {
            &quot;taskName&quot;: &quot;build&quot;,
            &quot;echoCommand&quot;: true,
            &quot;command&quot;: &quot;node&quot;,
            &quot;args&quot;: [
                &quot;build/bin/build.js&quot;
            ],
            &quot;suppressTaskName&quot;: true,
            &quot;isBuildCommand&quot;: true
        },
        {
            &quot;taskName&quot;: &quot;watch&quot;,
            &quot;echoCommand&quot;: true,
            &quot;command&quot;: &quot;node&quot;,
            &quot;args&quot;: [
                &quot;build/bin/watch.js&quot;
            ],
            &quot;suppressTaskName&quot;: true,
            &quot;isBackground&quot;: true
        }
    ]
}
</code></pre><p>这样配置好后，按 <code>Ctrl + Shift + B</code> 即可开始单次构建。 不过单次构建比较慢（要10秒+），一般我都用实时构建：<code>Ctrl + P</code> 然后输入 <code>task watch &lt;回车&gt;</code> 即可开始实时构建。实时构建除了第一次比较慢，其他时候还是非常快的，一般1秒内就可以构建好。</p>
<h2 id="最后，webpack-构建错误提示"><a href="#最后，webpack-构建错误提示" class="headerlink" title="最后，webpack 构建错误提示"></a>最后，webpack 构建错误提示</h2><p>webpack 构建失败后一般都会有错误提示，会显示在输出窗口中：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://ww1.sinaimg.cn/large/bf5f3c73gy1fdqzn10qqtj20lw05djrt.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>为啥是彩色的？ 因为装了 <code>Output Colorizer</code> 这个插件。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://ww1.sinaimg.cn/large/bf5f3c73gy1fdqzom5o75j20aq022wee.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<p>当然，这样还是不够方便 -- 实时构建是后台运行的，“输出”窗口一般也都是在后台，每次保存完文件还得点开岂不麻烦。</p>
<p>要是能做到像 ESLint 一样直接把错误标到编辑器上面就好了。真的可以吗？翻了下 vscode 的文档，发现有神奇的 <code>problemMatcher</code> -- 可以对任务输出进行解析，解析出的问题会显示在“问题”窗口中，如果还有文件名行号和列号，则会在源代码编辑窗口中对应的位置标出来。</p>
<p>先放个最终效果：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://ww1.sinaimg.cn/large/bf5f3c73gy1fdqzwld2vcj20h105wwf7.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>在这个文件的第32行，import 了一个不存在的模块，这样的错误在 ESLint 中当然是检查不出来的，然而在 webpack 的实时构建中会报错：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://ww1.sinaimg.cn/large/bf5f3c73gy1fdqzye7y27j20ux02bt90.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>这个事情的困难在于两点：</p>
<ol>
<li>如何通过 <code>problemMatcher</code> 把这个错误给抓出来？</li>
<li>如何找到错误对应的行号？（如果可能的话，还有列号）</li>
</ol>
<p>webpack的错误输出格式并不是完全统一的，而且有些还没有行号 -- 一方面可能是 webpack 的 bug ，另一方面 vue 文件在构建的时候会拆成 template, script 和 style 三个方面进行构建，报错的行号可能对不上。</p>
<p>最终我的解决方案是对 webpack 的错误重新格式化输出，然后匹配：</p>
<p>首先，重新格式化输出需要 <code>format-webpack-stats-errors-warnings</code> 这个包（偶新写的）</p>
<pre><code>npm install --save-dev format-webpack-stats-errors-warnings
</code></pre><p>然后，到 <code>build/bin/build.js</code> 和 <code>build/bin/watch.js</code> 中在 webpack 构建完成的回调函数中增加这个格式化后的输出：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://ww1.sinaimg.cn/large/bf5f3c73gy1fdr08zrcr6j20mg0awq48.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>更多使用介绍见 <a href="https://github.com/Clarence-pan/format-webpack-stats-errors-warnings" target="_blank" rel="external">github</a></p>
<p>最后，在 <code>.vscode/tasks.json</code> 中，每个任务下添加 <code>problemWatcher</code>:</p>
<pre><code>// ...
{
    &quot;taskName&quot;: &quot;build&quot;,
    // ...
    // build 任务的: 
    &quot;problemMatcher&quot;: {
        &quot;owner&quot;: &quot;webpack&quot;,
        &quot;fileLocation&quot;: [
            &quot;relative&quot;,
            &quot;${workspaceRoot}&quot;
        ],
        &quot;pattern&quot;: {
            &quot;regexp&quot;: &quot;^!&gt;(\\w+): (\\S+)?:(\\d+),(\\d+)(?:~(?:(\\d+),)?(\\d+))?: (.*)$&quot;,
            &quot;severity&quot;: 1,
            &quot;file&quot;: 2,
            &quot;line&quot;: 3,
            &quot;column&quot;: 4,
            &quot;endLine&quot;: 5,
            &quot;endColumn&quot;: 6,
            &quot;message&quot;: 7
        }
    }
}

{
    &quot;taskName&quot;: &quot;watch&quot;,
    // ...
    // watch 任务的：
    &quot;problemMatcher&quot;: {
        &quot;owner&quot;: &quot;webpack&quot;,
        &quot;fileLocation&quot;: [
            &quot;relative&quot;,
            &quot;${workspaceRoot}&quot;
        ],
        &quot;pattern&quot;: {
            &quot;regexp&quot;: &quot;^!&gt;(\\w+): (\\S+)?:(\\d+),(\\d+)(?:~(?:(\\d+),)?(\\d+))?: (.*)$&quot;,
            &quot;severity&quot;: 1,
            &quot;file&quot;: 2,
            &quot;line&quot;: 3,
            &quot;column&quot;: 4,
            &quot;endLine&quot;: 5,
            &quot;endColumn&quot;: 6,
            &quot;message&quot;: 7
        },
        &quot;watching&quot;: {
            &quot;activeOnStart&quot;: true,
            &quot;beginsPattern&quot;: &quot;^\\s*Webpack begin run&quot;,
            &quot;endsPattern&quot;: &quot;^\\s*Build complete at&quot;
        }
    }
    // ...
}
// ...
</code></pre><p>注：在 watch 任务中，为了匹配何时开始和何时结束，我在 webpack 构建的 run 和 watch 时增加了一个 <code>console.log(&#39;Webpack begin run&#39;)</code> 的打印，而在构建完成后增加了一个 <code>console.log(&quot;Build complete at ..&quot;)</code> 的打印。</p>
<p>OK，终于基本搞定了 vscode ，可以愉快地开发 vue 应用了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近有个项目使用了 &lt;a href=&quot;http://cn.vuejs.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vue.js&lt;/a&gt; ，本来一直使用的是 PHPStorm 来进行开发，可是遇到了很多问题。&lt;/p&gt;
&lt;p&gt;后来，果断放弃收费的 PHPStorm ，改用 &lt;a href=&quot;https://code.visualstudio.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vscode (Visual Stdio Code)&lt;/a&gt;.&lt;br&gt;当然 vscode 对 vue 也不是原生支持的，今天来扒一扒如何配置 vscode 以便优雅地编辑 vue 文件&lt;/p&gt;
    
    </summary>
    
      <category term="vscode" scheme="http://clarence-pan.github.io/categories/vscode/"/>
    
    
      <category term="vscode" scheme="http://clarence-pan.github.io/tags/vscode/"/>
    
      <category term="Visual Stdio Code" scheme="http://clarence-pan.github.io/tags/Visual-Stdio-Code/"/>
    
      <category term="vue" scheme="http://clarence-pan.github.io/tags/vue/"/>
    
      <category term="Vue.js" scheme="http://clarence-pan.github.io/tags/Vue-js/"/>
    
      <category term="js" scheme="http://clarence-pan.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序开发踩坑记</title>
    <link href="http://clarence-pan.github.io/2017/02/15/frustrations-in-developing-wechat-mini-application/"/>
    <id>http://clarence-pan.github.io/2017/02/15/frustrations-in-developing-wechat-mini-application/</id>
    <published>2017-02-15T19:09:50.000Z</published>
    <updated>2017-07-05T03:30:06.651Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>微信小程序自去年公测以来，我司也申请了一个帐号开发，春节前后开始开发，现在终于告一个段落了。谨以此文记录下踩过的坑。<br><a id="more"></a></p>
<h2 id="坑1：scroll-view与onPullDownRefresh冲突"><a href="#坑1：scroll-view与onPullDownRefresh冲突" class="headerlink" title="坑1：scroll-view与onPullDownRefresh冲突"></a>坑1：scroll-view与onPullDownRefresh冲突</h2><p>由于有几个页面需要将导航tab栏自动置顶，所以使用了scroll-view。然而又想要下拉刷新，本来想直接使用onPullDownRefresh，结果却发现下拉的时候onPullDownRefresh根本没有！囧！</p>
<p>研究了半天，最终监听touchXXX自己模拟了个下拉刷新。（具体实现方案改日再分享。）为了尽量接近微信原生的下拉刷新，还特意抄了半天微信原生的下拉刷新动画...</p>
<pre><code class="html">&lt;div class=&quot;loading&quot;&gt;&lt;div class=&quot;dot&quot;&gt;&lt;/div&gt;&lt;/div&gt;
</code></pre>
<pre><code class="css">.loading{
    display: block;
    width: 100%;
    height: 20px;
    padding: 20px 0;
    text-align: center;
    background: #eee;
}
.loading::before,
.loading .dot,
.loading::after
{
  content: &#39;&#39;;
  display: inline-block;
  color: transparent;
  width: 14px;
  height: 14px;
  border-radius: 14px;
  background: #fff;
  overflow: hidden;
  margin: 0 8px;
}

.loading::before,
.loading .dot,
.loading::after{
  -webkit-animation: pulldown-refresh-loader 1.4s infinite ease-in-out;
  animation: pulldown-refresh-loader 1.4s infinite ease-in-out;
  -webkit-animation-fill-mode: both;
  animation-fill-mode: both;
}
.loading::before{
  -webkit-animation-delay: -0.32s;
  animation-delay: -0.32s;
}
.loading .dot{
  -webkit-animation-delay: -0.16s;
  animation-delay: -0.16s;
}

@-webkit-keyframes pulldown-refresh-loader {
  0%, 80%, 100% { background-color: #f0f0f0; }
  40% { background-color: #fff; }
}

@keyframes pulldown-refresh-loader {
  0%, 80%, 100% { background-color: #f0f0f0; }
  40% { background-color: #fff; }
}
</code></pre>
<div><style>.loading{display:block;width:100%;height:20px;padding:20px 0;text-align:center;background:#eee}.loading .dot,.loading::after,.loading::before{content:&quot;&quot;;display:inline-block;color:transparent;width:14px;height:14px;border-radius:14px;background:#fff;overflow:hidden;margin:0 8px;-webkit-animation:pulldown-refresh-loader 1.4s infinite ease-in-out;animation:pulldown-refresh-loader 1.4s infinite ease-in-out;-webkit-animation-fill-mode:both;animation-fill-mode:both}.loading::before{-webkit-animation-delay:-.32s;animation-delay:-.32s}.loading .dot{-webkit-animation-delay:-.16s;animation-delay:-.16s}@-webkit-keyframes pulldown-refresh-loader{0%,100%,80%{background-color:#f0f0f0}40%{background-color:#fff}}@keyframes pulldown-refresh-loader{0%,100%,80%{background-color:#f0f0f0}40%{background-color:#fff}}</style><div class="loading"><div class="dot"></div></div></div>

<h2 id="坑2：无法获取元素的高度"><a href="#坑2：无法获取元素的高度" class="headerlink" title="坑2：无法获取元素的高度"></a>坑2：无法获取元素的高度</h2><p>本来有个页面是要做成监听滚动，然后自动切换顶部tab的，类似 <a href="http://www.runoob.com/try/try.PHP?filename=bootstrap3-plugin-scrollspy&amp;basepath=0" target="_blank" rel="external"> bootstrap的滚动监听</a> 的效果。 然而里面有大段的文本，而文本的高度根本算不来，囧。还是放弃这个效果吧。</p>
<h2 id="坑3：无法在bindXXX的事件处理的时候阻止冒泡"><a href="#坑3：无法在bindXXX的事件处理的时候阻止冒泡" class="headerlink" title="坑3：无法在bindXXX的事件处理的时候阻止冒泡"></a>坑3：无法在bindXXX的事件处理的时候阻止冒泡</h2><p>有人说，你可以使用catchXXX呀！然而，我在某些时候才需要阻止事件冒泡，另外一些时候是不需要阻止冒泡的，是需要默认行为...</p>
<p>最终采用了一个很挫的方案来“解决” -- 复制那个<code>&lt;view&gt;</code>根据是否组织冒泡分别渲染成<code>bindXXX</code>或<code>catchXXX</code>...：</p>
<pre><code>&lt;view class=&quot;{{preventDefault && 'hide'}}&quot; catchXXX=&quot;yyy&quot; &gt;zzz&lt;/view&gt;
&lt;view class=&quot;{{!preventDefault && 'hide'}}&quot; bindXXX=&quot;yyy&quot; &gt;zzz&lt;/view&gt;
</code></pre><p>这个还不能简单地使用<code>wx:if</code>，否则切换的成本太高了点。</p>
<h2 id="坑4：-预览前构建时间比较长"><a href="#坑4：-预览前构建时间比较长" class="headerlink" title="坑4： 预览前构建时间比较长"></a>坑4： 预览前构建时间比较长</h2><p>貌似没有好办法，预览的构建貌似不是增量的，希望微信官方啥时候能改成增量的就好了。点击预览按钮后去倒杯水喝吧。</p>
<h2 id="坑5：-组件复用好蛋疼"><a href="#坑5：-组件复用好蛋疼" class="headerlink" title="坑5： 组件复用好蛋疼"></a>坑5： 组件复用好蛋疼</h2><p>小程序里面虽然提供了<code>&lt;template&gt;</code>可以复用一部分模版，但是我们要是想复用一个具有完整功能组件（比如一个对话框 ）就会非常蛋疼 -- 数据怎么传呢？业务逻辑代码写在哪里？样式如何加载？</p>
<p>目前解决方法是将组件封装成 <code>xxx.js</code>， <code>xxx.wxml</code> 和 <code>xxx.wxss</code>，用的时候都要引用下... 好麻烦！很怀念React里面的组件。</p>
<p>回头考虑通过在微信小程序前面加一道构建，以便自动引用组件相关东东。</p>
<h2 id="坑6：不支持webview直接嵌入html代码"><a href="#坑6：不支持webview直接嵌入html代码" class="headerlink" title="坑6：不支持webview直接嵌入html代码"></a>坑6：不支持webview直接嵌入html代码</h2><p>像后台通过富文本编辑器录入的文章页面没法直接显示了... 还好有<code>wxParse</code>。尽管样式调起来很蛋疼，起码能看了。</p>
<h2 id="坑7：测试与发布"><a href="#坑7：测试与发布" class="headerlink" title="坑7：测试与发布"></a>坑7：测试与发布</h2><p>微信开发者工具的预览版本只能谁登录谁来扫，其他人扫根本开不了 --- 同是一个小程序的开发者也不行，囧。为了让测试人员方便测试，还得教会测试人员如何登录微信开发者工具，如何更新代码，如何构建并预览小程序。。。 </p>
<p>啥，你说有“预览版本”，预览版本更麻烦，上传的时候只能管理员才能上传，上传完还必须选择为预览版本，预览版本还不是每个人能看的，而是加到预览者里面的才能看（开发者居然默认没有加到预览者里面！） -- 每一个操作都是要管理员扫码...</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>微信小程序坑还有很多，未完待续...</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;微信小程序自去年公测以来，我司也申请了一个帐号开发，春节前后开始开发，现在终于告一个段落了。谨以此文记录下踩过的坑。&lt;br&gt;
    
    </summary>
    
      <category term="微信小程序" scheme="http://clarence-pan.github.io/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="微信" scheme="http://clarence-pan.github.io/tags/%E5%BE%AE%E4%BF%A1/"/>
    
      <category term="小程序" scheme="http://clarence-pan.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="微信小程序" scheme="http://clarence-pan.github.io/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="开发" scheme="http://clarence-pan.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="坑" scheme="http://clarence-pan.github.io/tags/%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>HTTP2试用小记</title>
    <link href="http://clarence-pan.github.io/2016/11/17/upgrade-nginx-to-support-http2/"/>
    <id>http://clarence-pan.github.io/2016/11/17/upgrade-nginx-to-support-http2/</id>
    <published>2016-11-17T00:00:00.000Z</published>
    <updated>2017-07-05T03:30:06.663Z</updated>
    
    <content type="html"><![CDATA[<p>这两天把公司的网站升级到了全站https. 顺便瞄到了<a href="http://caniuse.com/#search=http2" target="_blank" rel="external">HTTP2的浏览器支持情况</a>：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="//ww1.sinaimg.cn/large/bf5f3c73gw1f9v3qb02raj20z90epwij.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>支持得还都蛮好的嘛。忍不住试用了一把HTTP2 -- 就直接拿<a href="https://www.clarencep.com" target="_blank" rel="external">本博客</a>来做示例了。</p>
<a id="more"></a>
<h2 id="升级nginx"><a href="#升级nginx" class="headerlink" title="升级nginx"></a>升级nginx</h2><p>主流浏览器基本上都支持了HTTP2，但是nginx只有升级到1.10以上版本才行 -- 鄙站之前用的还是nginx 1.6的某个版本。</p>
<p>更新了下apt-get，发现仓库中没有1.10版本 -- 囧 -- 只好自己编译吧：</p>
<p>首先，下载nginx和openssl：</p>
<pre><code class="sh">cd /usr/local/src

wget https://nginx.org/download/nginx-1.11.6.tar.gz
tar xzf nginx-1.11.6.tar.gz

wget https://www.openssl.org/source/openssl-1.1.0c.tar.gz
tar xzvf openssl-1.1.0c.tar.gz
</code></pre>
<p>然后，编译nginx：</p>
<pre><code class="sh">
cd nginx-1.11.6
./configure --prefix=/usr/local/nginx \
  --conf-path=/etc/nginx/nginx.conf \
  --with-openssl=../openssl-1.1.0c \
  --with-http_v2_module \
  --with-http_ssl_module \
  --with-http_gzip_static_module

make &amp;&amp; sudo make install

# 为了方便全局执行，则创建个符号链接：
sudo ln -s /usr/local/nginx/sbin/nginx /usr/sbin/nginx
</code></pre>
<p>接着，就是移植老的配置了，老的配置都可以直接使用，直接拷贝过来即可。<br>最后，启用HTTP2 -- 目前HTTP2只能和ssl(https)一起使用，只要修改下listen语句即可：</p>
<pre><code># 老的配置：
# listen 443;
# 新的配置（启用http2）:
  listen 443 ssl http2;
</code></pre><p>别忘了重启nginx (<code>sudo nginx -s reload</code>).</p>
<h2 id="尝试通过HTTP2访问"><a href="#尝试通过HTTP2访问" class="headerlink" title="尝试通过HTTP2访问"></a>尝试通过HTTP2访问</h2><p>搞定nginx后，随手拿个chrome就可以使用HTTP2了 -- chrome 49及以上版本都支持HTTP2，还好chrome会自动升级，基本不用担心chrome太老。</p>
<p>打开F12查看下HTTP头部，果然Request Headers都不一样了：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="//ww2.sinaimg.cn/large/bf5f3c73gw1f9v473ftnoj20a40f7myj.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>这些<code>:authority</code>, <code>:method</code> 和 <code>:path</code> 等冒号打头的就是HTTP2的特征之一 -- 手边没有抓包工具，只能这样粗浅的判断了。</p>
<p>看看HTTP2的流水：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="//ww1.sinaimg.cn/large/bf5f3c73gw1f9v4aad7zsj216x02faag.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>再比比HTTP1.1的流水：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="//ww4.sinaimg.cn/large/bf5f3c73gw1f9v4ajjs6bj216w02i0te.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>HTTP2的流水简洁多了，有没有！</p>
<h2 id="性能PK"><a href="#性能PK" class="headerlink" title="性能PK"></a>性能PK</h2><p>HTTP2的性能一般应该比HTTP1.1的高一些，但是，可不一定哟：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="//ww2.sinaimg.cn/large/bf5f3c73gw1f9v3l9va5nj20mc081acu.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>上图是<a href="https://www.clarencep.com" target="_blank" rel="external">本博客首页</a>在相同nginx、相同PC、相同网络条件下对HTTP2和HTTP1.1分别测试的PK结果。 可见虽然HTTP2的网络加载时间（Load）比HTTP1.1要短，但是DOM渲染时间（DOMContentLoaded）却比HTTP1.1要长。。。</p>
<p>可能是由于本博没有专门为HTTP2优化所至。也可能是浏览器渲染没有为HTTP2优化的缘故。</p>
<p>最后总结一句：HTTP2入坑要谨慎。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这两天把公司的网站升级到了全站https. 顺便瞄到了&lt;a href=&quot;http://caniuse.com/#search=http2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTTP2的浏览器支持情况&lt;/a&gt;：&lt;/p&gt;
&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                    &lt;img src=&quot;//ww1.sinaimg.cn/large/bf5f3c73gw1f9v3qb02raj20z90epwij.jpg&quot; alt=&quot;&quot; title=&quot;&quot;&gt;
                &lt;/div&gt;
                &lt;div class=&quot;image-caption&quot;&gt;&lt;/div&gt;
            &lt;/figure&gt;
&lt;p&gt;支持得还都蛮好的嘛。忍不住试用了一把HTTP2 -- 就直接拿&lt;a href=&quot;https://www.clarencep.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;本博客&lt;/a&gt;来做示例了。&lt;/p&gt;
    
    </summary>
    
      <category term="nginx" scheme="http://clarence-pan.github.io/categories/nginx/"/>
    
    
      <category term="nginx" scheme="http://clarence-pan.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>一个将多说的头像变成https的简单方法</title>
    <link href="http://clarence-pan.github.io/2016/09/24/a-simple-way-to-make-duoshuo-avatar-https/"/>
    <id>http://clarence-pan.github.io/2016/09/24/a-simple-way-to-make-duoshuo-avatar-https/</id>
    <published>2016-09-24T00:00:00.000Z</published>
    <updated>2017-07-05T03:30:06.651Z</updated>
    
    <content type="html"><![CDATA[<p>最近启用全站https之后，却发现地址栏里面却还没有小绿锁 -- 检查了下网络请求，发现原来是多说搞的鬼：</p>
<blockquote>
<p>多说的头像有一些不是https的，如：<code>http://wx.qlogo.cn/mmopen/5YxiaxTAIu0nOId2JW67SDEgJqPNjx33IeUNG5QJLuddhd45icL0R905icmdXbSib4H9FLib1IUsjA67ePswvZ9PxVA/0</code></p>
</blockquote>
<p>其实呢，就上面这个这个头像而言，将http协议改成https协议后其实也是能够访问的。所以呢，就有了一个很简单的解决方案：</p>
<a id="more"></a>
<p>首先，把多说的嵌入脚本下载保存到本地。</p>
<pre><code>wget https://static.duoshuo.com/embed.js
</code></pre><p>其次，打开这个文件，格式化一下，找到<code>avatarUrl</code>这个函数，将其修改为这样：</p>
<pre><code>avatarUrl: function (e) {
    return ((e.avatar_url || rt.data.default_avatar_url) + &#39;&#39;).replace(/^http:/, location.protocol);
}
</code></pre><p>最后，压缩下这个js，并替换原本的js：</p>
<pre><code>&lt;script type=&quot;text/javascript&quot;&gt;
    var duoshuoQuery = {short_name:&quot;&lt;%= config.duoshuo_shortname %&gt;&quot;};
    setTimeout(function() {
        var ds = document.createElement(&#39;script&#39;);
        ds.type = &#39;text/javascript&#39;;
        ds.async = true; 
        ds.src = &#39;/lib/duoshuo-embed.min.js&#39;;
        ds.charset = &#39;UTF-8&#39;;
        (document.getElementsByTagName(&#39;head&#39;)[0]
                || document.getElementsByTagName(&#39;body&#39;)[0]).appendChild(ds);
    }, 10);
&lt;/script&gt;
</code></pre><p>构建并发布网站，OK了。</p>
<p>有个小bug：如果头像的服务器不支持https的话，就无法显示头像了。这其实也是有办法解决的，比如搞个反向代理，将http转换成https。不过有点麻烦，懒得弄了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近启用全站https之后，却发现地址栏里面却还没有小绿锁 -- 检查了下网络请求，发现原来是多说搞的鬼：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;多说的头像有一些不是https的，如：&lt;code&gt;http://wx.qlogo.cn/mmopen/5YxiaxTAIu0nOId2JW67SDEgJqPNjx33IeUNG5QJLuddhd45icL0R905icmdXbSib4H9FLib1IUsjA67ePswvZ9PxVA/0&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其实呢，就上面这个这个头像而言，将http协议改成https协议后其实也是能够访问的。所以呢，就有了一个很简单的解决方案：&lt;/p&gt;
    
    </summary>
    
      <category term="多说" scheme="http://clarence-pan.github.io/categories/%E5%A4%9A%E8%AF%B4/"/>
    
    
      <category term="https" scheme="http://clarence-pan.github.io/tags/https/"/>
    
      <category term="多说" scheme="http://clarence-pan.github.io/tags/%E5%A4%9A%E8%AF%B4/"/>
    
      <category term="blog" scheme="http://clarence-pan.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>A Note To hash_pbkdf2 in PHP</title>
    <link href="http://clarence-pan.github.io/2016/09/06/a-note-to-php-hash_pbkdf2/"/>
    <id>http://clarence-pan.github.io/2016/09/06/a-note-to-php-hash_pbkdf2/</id>
    <published>2016-09-06T00:00:00.000Z</published>
    <updated>2017-07-05T03:30:06.651Z</updated>
    
    <content type="html"><![CDATA[<p>Please pay great attention to the <strong>$length</strong> parameter! It is exactly the <strong>return string length</strong>, NOT the length of raw binary hash result.</p>
<p>I had a big problem about this --<br>I thought that <code>hash_pbkdf2(...false)</code> should equals to <code>bin2hex(hash_pbkdf2(...true))</code> just like <code>md5($x)</code> equals <code>bin2hex(md5($x, true))</code>. However I was wrong:</p>
<a id="more"></a>
<pre><code class="PHP">hash_pbkdf2(&#39;sha256&#39;, &#39;123456&#39;, &#39;abc&#39;, 10000, 50, false); // returns string(50) &quot;584bc5b41005169f1fa15177edb78d75f9846afc466a4bae05&quot;
hash_pbkdf2(&#39;sha256&#39;, &#39;123456&#39;, &#39;abc&#39;, 10000, 50, true); // returns string(50) &quot;XKŴ��Qw�u��j�FjK���BFW�YpG    �mp.g2�`;N�&quot;
bin2hex(hash_pbkdf2(&#39;sha256&#39;, &#39;123456&#39;, &#39;abc&#39;, 10000, 50, true)); // returns string(100) &quot;584bc5b41005169f1fa15177edb78d75f9846afc466a4bae05119c82424657c81b5970471f098a6d702e6732b7603b194efe&quot;
</code></pre>
<p>So I add such a note. Hope it will help someone else like me.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Please pay great attention to the &lt;strong&gt;$length&lt;/strong&gt; parameter! It is exactly the &lt;strong&gt;return string length&lt;/strong&gt;, NOT the length of raw binary hash result.&lt;/p&gt;
&lt;p&gt;I had a big problem about this --&lt;br&gt;I thought that &lt;code&gt;hash_pbkdf2(...false)&lt;/code&gt; should equals to &lt;code&gt;bin2hex(hash_pbkdf2(...true))&lt;/code&gt; just like &lt;code&gt;md5($x)&lt;/code&gt; equals &lt;code&gt;bin2hex(md5($x, true))&lt;/code&gt;. However I was wrong:&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://clarence-pan.github.io/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://clarence-pan.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>一个关于systemd私有目录的奇怪问题</title>
    <link href="http://clarence-pan.github.io/2016/08/12/a-strange-problem-about-systemd-private/"/>
    <id>http://clarence-pan.github.io/2016/08/12/a-strange-problem-about-systemd-private/</id>
    <published>2016-08-12T00:00:00.000Z</published>
    <updated>2017-07-05T03:30:06.651Z</updated>
    
    <content type="html"><![CDATA[<p>今天遇到一个奇怪的问题 -- PHP里面访问不了<code>/tmp/xhprof-data</code>目录，可是这个目录明明是存在的！</p>
<a id="more"></a>
<p>今天要使用xhprof进行性能分析，但是打开性能分析开关然后访问页面后却发现没有任何性能数据，很奇怪。</p>
<p>检查了下httpd的日志，发现有个fatal error： <code>PHP Fatal error:  Uncaught exception &#39;ErrorException&#39; with message &#39;fopen(/tmp/xhprof-data/57ad36118dcf0.default.xhprof): failed to open stream: No such file or directory&#39;</code></p>
<p>而对应的PHP代码是类似这样：<code>$file = fopen($filePath, &#39;w&#39;);</code></p>
<p>一般来说这个错误应该是目录不存在或权限不足导致的。那么就检查下对应的目录：</p>
<pre><code>➜  /tmp$ ll -d xhprof-data
drwxrwxrwx. 2 apache apache 41 Aug 12 10:34 xhprof-data
</code></pre><p>目录是存在的呀，而且为了让PHP能访问，特意设置了全部可以读写，并且所属的用户和组都是apache。</p>
<p>然后在代码里面测试下这个目录是否可以访问：</p>
<pre><code class="PHP">// 简单粗暴点，直接加一行打印看看
var_dump(is_dir(dirname($filePath)));die;
</code></pre>
<p>结果令人吃惊 -- 居然打印出来是<code>false</code>。</p>
<p>难道路径错了吗？把路径也重新打印出来核对下：</p>
<pre><code class="PHP">// 简单粗暴点，直接加一行打印看看
var_dump(dirname($filePath));die;
</code></pre>
<p>路径打印出来就是<code>/tmp/xhprof-data</code>，没有错！</p>
<p>奇葩问题呀！</p>
<p>最后尝试删除掉这个目录，然后在PHP里面加一行自动创建目录：</p>
<pre><code>is_dir(dirname($filePath)) or mkdir(dirname($filePath), 0777, true);
</code></pre><p>结果，居然通了！到tmp目录下看看跟之前创建的有啥区别：</p>
<pre><code>➜  /tmp$ ll xhprof-data
ls: cannot access xhprof-data: No such file or directory
</code></pre><p>奇怪了，目录呢？ 使用find找下试试：</p>
<pre><code>➜  /tmp$ find . -type d -name xhprof-data 
find: ‘./systemd-private-bd5ddddffb9240cdad836fe13ccb096d-httpd.service-kCEghE’: Permission denied
➜  /tmp$ sudo !!
➜  /tmp$ sudo find . -type d -name xhprof-data
./systemd-private-bd5ddddffb9240cdad836fe13ccb096d-httpd.service-kCEghE/tmp/xhprof-data
</code></pre><p>原来是放到了<code>systemd-private-bd5ddddffb9240cdad836fe13ccb096d-httpd.service-kCEghE</code>下面。</p>
<p>这个是个什么鬼？ 据google一下的结果，原来是systemd可以配置<code>/tmp</code>目录为私有目录，以防冲突而创建的。检查下配置：</p>
<pre><code>➜  /tmp$ cat /usr/lib/systemd/system/httpd.service | grep PrivateTmp
PrivateTmp=true
</code></pre><p>果然是有对应的这个配置。</p>
<p>涨姿势了。特此记录。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天遇到一个奇怪的问题 -- PHP里面访问不了&lt;code&gt;/tmp/xhprof-data&lt;/code&gt;目录，可是这个目录明明是存在的！&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://clarence-pan.github.io/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://clarence-pan.github.io/tags/PHP/"/>
    
      <category term="httpd" scheme="http://clarence-pan.github.io/tags/httpd/"/>
    
      <category term="systemd" scheme="http://clarence-pan.github.io/tags/systemd/"/>
    
  </entry>
  
  <entry>
    <title>如何在静态博客HEXO中只显示摘要信息</title>
    <link href="http://clarence-pan.github.io/2016/07/20/how-to-show-less-in-home-page-of-hexo/"/>
    <id>http://clarence-pan.github.io/2016/07/20/how-to-show-less-in-home-page-of-hexo/</id>
    <published>2016-07-20T00:00:00.000Z</published>
    <updated>2017-07-05T03:30:06.651Z</updated>
    
    <content type="html"><![CDATA[<p>默认情况下<code>hexo</code>博客(如本站)的首页显示的是完整的文章 -- 而文章比较长的时候这无疑会带来诸多不遍。 那怎么样才能只显示个摘要呢？</p>
<a id="more"></a>
<p>方法说白了，其实很简单 -- 只要加入一个<code>&lt;!-- more --&gt;</code>这样的占位符在文章正文里面即可：</p>
<pre><code class="markdown">
这就是一个简介

&lt;!-- more --&gt;

这里更多的内容
</code></pre>
<p>注意：这个占位符貌似只能另起一行，不能放在行内。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;默认情况下&lt;code&gt;hexo&lt;/code&gt;博客(如本站)的首页显示的是完整的文章 -- 而文章比较长的时候这无疑会带来诸多不遍。 那怎么样才能只显示个摘要呢？&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="http://clarence-pan.github.io/categories/blog/"/>
    
    
      <category term="blog" scheme="http://clarence-pan.github.io/tags/blog/"/>
    
      <category term="hexo" scheme="http://clarence-pan.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>如何解决Selenium中&quot;Cannot find function addEventListener in object [object HTMLDocument]&quot;的错误</title>
    <link href="http://clarence-pan.github.io/2016/04/28/how-to-resolve-cannot-find-function-addEventListener-error-in-selenium/"/>
    <id>http://clarence-pan.github.io/2016/04/28/how-to-resolve-cannot-find-function-addEventListener-error-in-selenium/</id>
    <published>2016-04-28T00:00:00.000Z</published>
    <updated>2017-07-05T03:30:06.651Z</updated>
    
    <content type="html"><![CDATA[<p>今天遇到一个很坑爹的问题，某Selenium自动化用例老是失败，报错如下：</p>
<a id="more"></a>
<pre><code>1) App\Tests\***********
Facebook\WebDriver\Exception\UnknownServerException: TypeError: Cannot find function addEventListener in object [object HTMLDocument]. (http://**********/*)
Failed to take screen-shot: org.openqa.selenium.htmlunit.HtmlUnitDriver cannot be cast to org.openqa.selenium.TakesScreenshot
</code></pre><p>Google了下这个错误，发现暂时没有适合我的解决方案：</p>
<ol>
<li>有的方案建议换firefox来测试 -- 可是我们的这个自动化用例是要跑在一台linux服务器上，装firefox不现实</li>
<li>有点方案建议禁用js     -- 可是现在这个页面越来越复杂，js禁用的话就侧不起来了，没意义</li>
<li>有点方案建议换PhantomJs -- 这个PhantomJs确实不会报这个错误，以前也用过，但是PhantomJs速度太慢，也是坑</li>
</ol>
<p>怎么办呢？本来想到<a href="https://sourceforge.net/projects/htmlunit/" target="_blank" rel="external">HtmlUnit的官方网站</a>上反馈这个bug，结果一搜，已经有人反馈过这个bug了： <a href="https://sourceforge.net/p/htmlunit/bugs/1536/" target="_blank" rel="external">https://sourceforge.net/p/htmlunit/bugs/1536/</a>. 这个状态为<code>closed</code>，说明已经解决了！</p>
<p>那为啥还报这个错误呢？怀疑是<code>Selenium</code>引用的<code>HtmlUnit</code>版本太低导致的。我使用的<code>Selenium</code>是<code>selenium-server-standalone-2.52.0.jar</code>， 目前最新版本的<code>Selenium</code>是<code>2.53.0</code>，然而不能升级到<code>2.53.0</code>，因为<code>2.53.0</code>中没有自带<code>HtmlUnit</code>.</p>
<p>咋办呢？幸好懂那么一丢丢<code>Java</code> —— 下载个<code>HtmlUnit</code>的最新版本，然后重新打包<code>selenium-server-standalone-2.52.0.jar</code>我是不会啦，不过可以指定下<code>classloader</code>的加载路径:</p>
<pre><code>java -Djava.ext.dirs=./lib -jar selenium-server-standalone-2.52.0.jar
</code></pre><p><code>./lib</code>就是放<code>HtmlUnit</code>的一堆<code>jar</code>文件的目录。这样子<code>classloader</code>加载<code>HtmlUnit</code>的类的时候就会使用<code>./lib</code>里面的了，就不会使用<code>selenium-server-standalone-2.52.0.jar</code>中的老版本中的了。</p>
<p>以此配置重新启动下<code>Selenium</code>的服务，然后再运行对应的测试用例，果然一切OK了。</p>
<p>完事，收工~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天遇到一个很坑爹的问题，某Selenium自动化用例老是失败，报错如下：&lt;/p&gt;
    
    </summary>
    
      <category term="Selenium" scheme="http://clarence-pan.github.io/categories/Selenium/"/>
    
    
      <category term="Selenium" scheme="http://clarence-pan.github.io/tags/Selenium/"/>
    
      <category term="Java" scheme="http://clarence-pan.github.io/tags/Java/"/>
    
      <category term="JavaScript" scheme="http://clarence-pan.github.io/tags/JavaScript/"/>
    
      <category term="HTMLUnit" scheme="http://clarence-pan.github.io/tags/HTMLUnit/"/>
    
  </entry>
  
  <entry>
    <title>PHP下使用强大的imagick轻松生成组合缩略图</title>
    <link href="http://clarence-pan.github.io/2016/02/19/use-imagick-to-composite-images-thumbnail/"/>
    <id>http://clarence-pan.github.io/2016/02/19/use-imagick-to-composite-images-thumbnail/</id>
    <published>2016-02-19T00:00:00.000Z</published>
    <updated>2017-07-05T03:30:06.663Z</updated>
    
    <content type="html"><![CDATA[<p>最近有个需求是要把多张图片组合起来生成缩略图，刚好可以用强大的<code>imagick</code>扩展。</p>
<a id="more"></a>
<p>这里说的<code>imagick</code> 是 <code>ImageMagick</code> 在PHP下的扩展。使用<code>pecl</code>安装起来那叫一个轻松简单 —— 一条命令就搞定：</p>
<pre><code class="sh">sudo pecl install imagick
</code></pre>
<p>（扩展装好后还是要在php.ini中加上<code>extension=imagick.so</code>，然后记得重启<code>apache</code>或<code>PHP-fpm</code>服务。）</p>
<p>这个需求是要这样生成缩略图：</p>
<ol>
<li>如果有1张图片，就直接生成这张图片的缩略图；</li>
<li>如果有2张图片，则一张在左边一张在右边，各一半；</li>
<li>如果有3张图片，则两张左边平均分配，一张独占右边；</li>
<li>如果有4张图片，则像田字格一样平均分配空间；</li>
<li>更多张图片，则只取前4张，按田字格方式生成缩略图。</li>
</ol>
<p>这规则还真不少，不过还不算太过复杂，很快搞出来了：</p>
<pre><code class="PHP">namespace \clarence\thumbnail;
class Thumbnail extends \Imagick
{
    /**
     * @param array $images
     * @param int $width
     * @param int $height
     * @return static
     * @throws ThumbnailException
     */
    public static function createFromImages($images, $width, $height){
        if (empty($images)){
            throw new ThumbnailException(&quot;No images!&quot;);
        }

        $thumbnail = new static();
        $thumbnail-&gt;newImage($width, $height, &#39;white&#39;, &#39;jpg&#39;);
        $thumbnail-&gt;compositeImages($images);

        return $thumbnail;
    }

    public function compositeImages($images){
        $imagesKeys = array_keys($images);
        $compositeConfig = $this-&gt;calcCompositeImagesPosAndSize($images);

        foreach ($compositeConfig as $index =&gt; $cfg){
            $imgKey = $imagesKeys[$index];
            $img = new \Imagick($images[$imgKey]);
            $img = $this-&gt;makeCompositeThumbnail($img, $cfg);
            $this-&gt;compositeImage($img, self::COMPOSITE_OVER, $cfg[&#39;to&#39;][&#39;x&#39;], $cfg[&#39;to&#39;][&#39;y&#39;]);
        }
    }

    protected function makeCompositeThumbnail(\Imagick $img, $cfg){
        $img-&gt;cropThumbnailImage($cfg[&#39;size&#39;][&#39;width&#39;], $cfg[&#39;size&#39;][&#39;height&#39;]);
        return $img;
    }

    protected function calcCompositeImagesPosAndSize($images){
        $width = $this-&gt;getImageWidth();
        $height = $this-&gt;getImageHeight();

        switch(count($images)){
            case 0:
                throw new ThumbnailException(&quot;No images!&quot;);
            case 1:
                // | 0 |
                return [
                    0 =&gt; [
                        &#39;to&#39; =&gt; [ &#39;x&#39; =&gt; 0, &#39;y&#39; =&gt; 0 ],
                        &#39;size&#39; =&gt; [
                            &#39;width&#39; =&gt; $width,
                            &#39;height&#39; =&gt; $height,
                        ]
                    ]
                ];
            case 2:
                // | 0 | 1 |
                return [
                    0 =&gt; [
                        &#39;to&#39; =&gt; [ &#39;x&#39; =&gt; 0, &#39;y&#39; =&gt; 0 ],
                        &#39;size&#39; =&gt; [
                            &#39;width&#39; =&gt; $width / 2,
                            &#39;height&#39; =&gt; $height,
                        ]
                    ],
                    1 =&gt; [
                        &#39;to&#39; =&gt; [ &#39;x&#39; =&gt; $width / 2, &#39;y&#39; =&gt; 0],
                        &#39;size&#39; =&gt; [
                            &#39;width&#39; =&gt; $width / 2,
                            &#39;height&#39; =&gt; $height,
                        ]
                    ]
                ];
            case 3:
                // | 0 | 1 |
                // | 2 |   |
                return [
                    0 =&gt; [
                        &#39;to&#39; =&gt; [ &#39;x&#39; =&gt; 0, &#39;y&#39; =&gt; 0 ],
                        &#39;size&#39; =&gt; [
                            &#39;width&#39; =&gt; $width / 2,
                            &#39;height&#39; =&gt; $height / 2,
                        ]
                    ],
                    1 =&gt; [
                        &#39;to&#39; =&gt; [ &#39;x&#39; =&gt; $width / 2, &#39;y&#39; =&gt; 0],
                        &#39;size&#39; =&gt; [
                            &#39;width&#39; =&gt; $width / 2,
                            &#39;height&#39; =&gt; $height,
                        ]
                    ],
                    2 =&gt; [
                        &#39;to&#39; =&gt; [ &#39;x&#39; =&gt; 0, &#39;y&#39; =&gt; $height / 2 ],
                        &#39;size&#39; =&gt; [
                            &#39;width&#39; =&gt; $width / 2,
                            &#39;height&#39; =&gt; $height / 2,
                        ]
                    ],
                ];
            default:
                // &gt;= 4:
                // | 0 | 1 |
                // | 2 | 3 |
                return [
                    0 =&gt; [
                        &#39;to&#39; =&gt; [ &#39;x&#39; =&gt; 0, &#39;y&#39; =&gt; 0 ],
                        &#39;size&#39; =&gt; [
                            &#39;width&#39; =&gt; $width / 2,
                            &#39;height&#39; =&gt; $height / 2,
                        ]
                    ],
                    1 =&gt; [
                        &#39;to&#39; =&gt; [ &#39;x&#39; =&gt; $width / 2, &#39;y&#39; =&gt; 0],
                        &#39;size&#39; =&gt; [
                            &#39;width&#39; =&gt; $width / 2,
                            &#39;height&#39; =&gt; $height / 2,
                        ]
                    ],
                    2 =&gt; [
                        &#39;to&#39; =&gt; [ &#39;x&#39; =&gt; 0, &#39;y&#39; =&gt; $height / 2 ],
                        &#39;size&#39; =&gt; [
                            &#39;width&#39; =&gt; $width / 2,
                            &#39;height&#39; =&gt; $height / 2,
                        ]
                    ],
                    3 =&gt; [
                        &#39;to&#39; =&gt; [ &#39;x&#39; =&gt; $width / 2, &#39;y&#39; =&gt; $height / 2],
                        &#39;size&#39; =&gt; [
                            &#39;width&#39; =&gt; $width / 2,
                            &#39;height&#39; =&gt; $height / 2,
                        ]
                    ],
                ];
        }
    }
}
</code></pre>
<p>用个试试：</p>
<pre><code class="PHP">$thumbnail = \clarence\thumbnail\Thumbnail::createFromImages($srcImages, 240, 320);
$thumbnail-&gt;writeImage($outputDir.&quot;/example.jpg&quot;);
</code></pre>
<p>效果立马出来了：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/media/14558111792512/14558119572671.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>赞一个~ </p>
<p>（详细代码见 <a href="http://github.com/clarence-pan/thumbnail" target="_blank" rel="external">http://github.com/clarence-pan/thumbnail</a>)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近有个需求是要把多张图片组合起来生成缩略图，刚好可以用强大的&lt;code&gt;imagick&lt;/code&gt;扩展。&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://clarence-pan.github.io/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://clarence-pan.github.io/tags/PHP/"/>
    
      <category term="imagick" scheme="http://clarence-pan.github.io/tags/imagick/"/>
    
      <category term="thumbnail" scheme="http://clarence-pan.github.io/tags/thumbnail/"/>
    
  </entry>
  
  <entry>
    <title>mac上spacemacs体验小记</title>
    <link href="http://clarence-pan.github.io/2016/01/04/note-of-spacemacs-on-mac/"/>
    <id>http://clarence-pan.github.io/2016/01/04/note-of-spacemacs-on-mac/</id>
    <published>2016-01-04T00:00:00.000Z</published>
    <updated>2017-07-05T03:30:06.659Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="第一步，安装emacs-mac"><a href="#第一步，安装emacs-mac" class="headerlink" title="第一步，安装emacs-mac"></a>第一步，安装emacs-mac</h2><p>emacs-mac是对GNU的emacs为mac环境进行了一定的定制，可能体验会更好一点。<br>那就卸载掉以前的emacs，装下吧：<br><a id="more"></a></p>
<pre><code class="sh">$ brew remove emacs
$ brew tap railwaycat/emacsmacport
$ brew install emacs-mac --with-spacemacs-icon
</code></pre>
<p>其中最后一步会花费比较长的时间，我当时在make阶段足足花费了近10分钟...</p>
<h2 id="第二步，克隆下spacemacs的配置"><a href="#第二步，克隆下spacemacs的配置" class="headerlink" title="第二步，克隆下spacemacs的配置"></a>第二步，克隆下spacemacs的配置</h2><p>如果以前曾经有<code>.emacs.d</code>的配置，要备份下，再克隆：</p>
<pre><code class="sh">$ mv ~/.emacs.d ~/.emacs.d.bak
$ git clone --recursive https://github.com/syl20bnr/spacemacs ~/.emacs.d
</code></pre>
<h2 id="第三步，启动emacs"><a href="#第三步，启动emacs" class="headerlink" title="第三步，启动emacs"></a>第三步，启动emacs</h2><p>注意：最好启动GUI版的emacs，而不是到控制台上去敲<code>emacs</code>:<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/media/14516227038772/14516227631953.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<p>第一次启动emacs，相当于安装spacemacs，会有一些选项，我是一路按默认的来。<br>很快就装好了（我一边敲上面的第x步，一边装，敲完了也就装完了）：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/media/14516227038772/14516235396950.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<p>看这界面，我滴个神呐，这还是我熟悉的emacs吗？</p>
<h1 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h1><h2 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h2><p>打开个文件试试，还是<code>C-x C-f</code>:<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/media/14516227038772/14516238187335.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br>只是这个minibuffer有点小绚丽，居然是竖排的，支持方向键上下移动，左右前进后退；如果输入文件名也能即时筛选文件。</p>
<h2 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h2><p>执行命令还是<code>M-x</code>:<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/media/14516227038772/14516246506381.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br>minibuffer都变成竖排的了</p>
<h2 id="查看帮助"><a href="#查看帮助" class="headerlink" title="查看帮助"></a>查看帮助</h2><p><code>SPC f e h</code> 是内置的spacemacs的帮助文档 (貌似很多命令都用<code>SPC</code>打头)</p>
<hr>
<p>更多内容见spacemacs下的其他文章...</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;h2 id=&quot;第一步，安装emacs-mac&quot;&gt;&lt;a href=&quot;#第一步，安装emacs-mac&quot; class=&quot;headerlink&quot; title=&quot;第一步，安装emacs-mac&quot;&gt;&lt;/a&gt;第一步，安装emacs-mac&lt;/h2&gt;&lt;p&gt;emacs-mac是对GNU的emacs为mac环境进行了一定的定制，可能体验会更好一点。&lt;br&gt;那就卸载掉以前的emacs，装下吧：&lt;br&gt;
    
    </summary>
    
      <category term="emacs" scheme="http://clarence-pan.github.io/categories/emacs/"/>
    
    
      <category term="emacs" scheme="http://clarence-pan.github.io/tags/emacs/"/>
    
      <category term="spacemacs" scheme="http://clarence-pan.github.io/tags/spacemacs/"/>
    
      <category term="mac" scheme="http://clarence-pan.github.io/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>PHP中的null合并运算符</title>
    <link href="http://clarence-pan.github.io/2015/12/30/null-coalesce-operator-in-php/"/>
    <id>http://clarence-pan.github.io/2015/12/30/null-coalesce-operator-in-php/</id>
    <published>2015-12-30T00:00:00.000Z</published>
    <updated>2017-07-05T03:30:06.659Z</updated>
    
    <content type="html"><![CDATA[<p>null合并运算符是一个好东西，有了它我们就能很方便的获取一个参数，并能在其为空的情况下提供一个默认值。比如在js中可以用<code>||</code>来搞：<br><a id="more"></a></p>
<pre><code class="js">function setSomething(a){
    a = a || &#39;some-default-value&#39;;
    // ...
}
</code></pre>
<p>而在PHP中，可惜PHP的<code>||</code>总是返回<code>true</code>或<code>false</code>，无法这样来搞。<br><a href="http://PHP.net/manual/en/migration70.new-features.PHP" target="_blank" rel="external">PHP7</a>才正式加入了<code>??</code>这个运算符：</p>
<pre><code class="PHP">// 获取user参数的值(如果为空，则用&#39;nobody&#39;)
$username = $_GET[&#39;user&#39;] ?? &#39;nobody&#39;;
// 等价于:
$username = isset($_GET[&#39;user&#39;]) ? $_GET[&#39;user&#39;] : &#39;nobody&#39;;
</code></pre>
<p>PHP7 估计还有很长时间才能用到生产环境中，那在目前的PHP5中有没有替代方案呢？<br>据研究，完全有个非常便捷的替代方案：</p>
<pre><code class="PHP">// 获取user参数的值(如果为空，则用&#39;nobody&#39;)
$username = @$_GET[&#39;user&#39;] ?: &#39;nobody&#39;;
// 等价于:
$username = isset($_GET[&#39;user&#39;]) ? $_GET[&#39;user&#39;] : &#39;nobody&#39;;
</code></pre>
<p>-- 运行此代码: <a href="https://3v4l.org/aDUW8" target="_blank" rel="external">https://3v4l.org/aDUW8</a></p>
<p>瞪大了眼睛看，跟前面的PHP7的例子差不多，主要是把 <code>??</code> 替换为了 <code>?:</code> 。 这个是个什么鬼呢？其实这就是 <code>(expr1) ? (expr2) : (expr3)</code> 表达式的省略模式：</p>
<blockquote>
<p>表达式 (expr1) ? (expr2) : (expr3) 在 expr1 求值为 TRUE 时的值为 expr2，在 expr1 求值为 FALSE 时的值为 expr3。<br>自 PHP 5.3 起，可以省略三元运算符中间那部分。表达式 expr1 ?: expr3 在 expr1 求值为 TRUE 时返回 expr1，否则返回 expr3。<br>-- <a href="http://PHP.net/manual/zh/language.operators.comparison.PHP" target="_blank" rel="external">http://PHP.net/manual/zh/language.operators.comparison.PHP</a></p>
</blockquote>
<p>当然，这个替代方案也不是完美的 —— 如果 <code>$_GET</code> 中没有 <code>&#39;user&#39;</code>，会有一条 <code>Notice: Undefined index: user</code> 的错误，所以需要用<code>@</code>来抑制这个错误，或者关闭 <code>E_NOTICE</code> 的错误。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;null合并运算符是一个好东西，有了它我们就能很方便的获取一个参数，并能在其为空的情况下提供一个默认值。比如在js中可以用&lt;code&gt;||&lt;/code&gt;来搞：&lt;br&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://clarence-pan.github.io/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://clarence-pan.github.io/tags/PHP/"/>
    
      <category term="Null Coalesce" scheme="http://clarence-pan.github.io/tags/Null-Coalesce/"/>
    
  </entry>
  
  <entry>
    <title>PlantUML的实例参考</title>
    <link href="http://clarence-pan.github.io/2015/12/24/plant-uml-instances/"/>
    <id>http://clarence-pan.github.io/2015/12/24/plant-uml-instances/</id>
    <published>2015-12-24T00:00:00.000Z</published>
    <updated>2017-07-05T03:30:06.663Z</updated>
    
    <content type="html"><![CDATA[<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/media/14508871765386/14508873043317.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<pre><code class="uml">
Alice -&gt; Bob: Authentication Request
Bob --&gt; Alice: Authentication Response

Alice -&gt; Bob: Another authentication Request
Alice &lt;-- Bob: another authentication Response
</code></pre>
<a id="more"></a>
<hr>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/media/14508871765386/14508873876653.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<pre><code class="uml">
actor Foo1
boundary Foo2
control Foo3
entity Foo4
database Foo5
Foo1 -&gt; Foo2 : To boundary
Foo1 -&gt; Foo3 : To control
Foo1 -&gt; Foo4 : To entity
Foo1 -&gt; Foo5 : To database
</code></pre>
<hr>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/media/14508871765386/14508874581737.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<pre><code class="uml">
actor Bob #red
&#39; The only difference between actor
&#39;and participant is the drawing
participant Alice
participant &quot;I have a really\nlong name&quot; as L #99FF99
/&#39; You can also declare:
   participant L as &quot;I have a really\nlong name&quot;  #99FF99
  &#39;/

Alice-&gt;Bob: Authentication Request
Bob-&gt;Alice: Authentication Response
Bob-&gt;L: Log transaction
</code></pre>
<hr>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/media/14508871765386/14508875415584.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<pre><code class="uml">
Alice -&gt; &quot;Bob()&quot; : Hello
&quot;Bob()&quot; -&gt; &quot;This is very\nlong&quot; as Long
&#39; You can also declare:
&#39; &quot;Bob()&quot; -&gt; Long as &quot;This is very\nlong&quot;
Long --&gt; &quot;Bob()&quot; : ok
</code></pre>
<hr>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/media/14508871765386/14508876062052.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<pre><code class="uml">
Alice-&gt;Alice: This is a signal to self.\nIt also demonstrates\nmultiline \ntext
</code></pre>
<hr>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/media/14508871765386/14508876691388.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<pre><code class="uml">
Bob -&gt;x Alice
Bob -&gt; Alice
Bob -&gt;&gt; Alice
Bob -\ Alice
Bob \\- Alice
Bob //-- Alice

Bob -&gt;o Alice
Bob o\\-- Alice

Bob &lt;-&gt; Alice
Bob &lt;-&gt;o Alice
</code></pre>
<hr>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/media/14508871765386/14508877906015.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<pre><code class="uml">
Bob -[#red]&gt; Alice : hello
Alice -[#0000FF]-&gt;Bob : ok

autonumber
Bob -&gt; Alice : Authentication Request
Bob &lt;- Alice : Authentication Response


autonumber 15
Bob -&gt; Alice : Another authentication Request
Bob &lt;- Alice : Another authentication Response

autonumber 40 10
Bob -&gt; Alice : Yet another authentication Request
Bob &lt;- Alice : Yet another authentication Response


autonumber &quot;&lt;b&gt;[000]&quot;
Bob -&gt; Alice : Authentication Request
Bob &lt;- Alice : Authentication Response

autonumber 15 &quot;&lt;b&gt;(&lt;u&gt;##&lt;/u&gt;)&quot;
Bob -&gt; Alice : Another authentication Request
Bob &lt;- Alice : Another authentication Response

autonumber 40 10 &quot;&lt;font color=red&gt;&lt;b&gt;Message 0  &quot;
Bob -&gt; Alice : Yet another authentication Request
Bob &lt;- Alice : Yet another authentication Response
</code></pre>
<hr>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/media/14508871765386/14508878845770.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<pre><code class="uml">
title Simple communication example

Alice -&gt; Bob: Authentication Request
Bob --&gt; Alice: Authentication Response

Alice -&gt; Bob : Hello
legend right
  Short
  legend
endlegend
</code></pre>
<hr>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/media/14508871765386/14508880026002.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<pre><code class="uml">

Alice -&gt; Bob : message 1
Alice -&gt; Bob : message 2

newpage

Alice -&gt; Bob : message 3
Alice -&gt; Bob : message 4

newpage A title for the\nlast page

Alice -&gt; Bob : message 5
Alice -&gt; Bob : message 6
</code></pre>
<hr>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/media/14508871765386/14508880581805.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<pre><code class="uml">
Alice -&gt; Bob: Authentication Request

alt successful case

    Bob -&gt; Alice: Authentication Accepted

else some kind of failure

    Bob -&gt; Alice: Authentication Failure
    group My own label
        Alice -&gt; Log : Log attack start
        loop 1000 times
            Alice -&gt; Bob: DNS Attack
        end
        Alice -&gt; Log : Log attack end
    end

else Another type of failure

   Bob -&gt; Alice: Please repeat

end
</code></pre>
<hr>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/media/14508871765386/14508881008619.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<pre><code class="uml">
Alice-&gt;Bob : hello
note left: this is a first note

Bob-&gt;Alice : ok
note right: this is another note

Bob-&gt;Bob : I am thinking
note left
    a note
    can also be defined
    on several lines
end note
</code></pre>
<hr>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/media/14508871765386/14508881512034.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<pre><code class="uml">
participant Alice
participant Bob
note left of Alice #aqua
    This is displayed 
    left of Alice. 
end note

note right of Alice: This is displayed right of Alice.

note over Alice: This is displayed over Alice.

note over Alice, Bob #FFAAAA: This is displayed\n over Bob and Alice.

note over Bob, Alice
    This is yet another
    example of
    a long note.
end note
</code></pre>
<hr>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/media/14508871765386/14508882023621.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<pre><code class="uml">caller -&gt; server : conReq
hnote over caller : idle
caller &lt;- server : conConf
rnote over server
 &quot;r&quot; as rectangle
 &quot;h&quot; as hexagon
endrnote
</code></pre>
<hr>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/media/14508871765386/14508882698374.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<pre><code class="uml">
participant Alice
participant &quot;The **Famous** Bob&quot; as Bob

Alice -&gt; Bob : hello --there--
... Some ~~long delay~~ ...
Bob -&gt; Alice : ok
note left
  This is **bold**
  This is //italics//
  This is &quot;&quot;monospaced&quot;&quot;
  This is --stroked--
  This is __underlined__
  This is ~~waved~~
end note

Alice -&gt; Bob : A //well formatted// message
note right of Alice 
 This is &lt;back:cadetblue&gt;&lt;size:18&gt;displayed&lt;/size&gt;&lt;/back&gt; 
 __left of__ Alice. 
end note
note left of Bob 
 &lt;u:red&gt;This&lt;/u&gt; is &lt;color #118888&gt;displayed&lt;/color&gt; 
 **&lt;color purple&gt;left of&lt;/color&gt; &lt;s:red&gt;Alice&lt;/strike&gt; Bob**. 
end note
note over Alice, Bob
 &lt;w:#FF33FF&gt;This is hosted&lt;/w&gt; by &lt;img sourceforge.jpg&gt;
end note
</code></pre>
<hr>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/media/14508871765386/14508883127897.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<pre><code class="uml">

== Initialization ==

Alice -&gt; Bob: Authentication Request
Bob --&gt; Alice: Authentication Response

== Repetition ==

Alice -&gt; Bob: Another authentication Request
Alice &lt;-- Bob: another authentication Response
</code></pre>
<hr>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/media/14508871765386/14508883507270.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<pre><code class="uml">
participant Alice
actor Bob

ref over Alice, Bob : init

Alice -&gt; Bob : hello

ref over Bob
  This can be on
  several lines
end ref
</code></pre>
<hr>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/media/14508871765386/14508884666136.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<pre><code class="uml">
Alice -&gt; Bob: Authentication Request
...
Bob --&gt; Alice: Authentication Response
...5 minutes latter...
Bob --&gt; Alice: Bye !
</code></pre>
<hr>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/media/14508871765386/14508885234862.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<pre><code class="uml">
Alice -&gt; Bob: message 1
Bob --&gt; Alice: ok
|||
Alice -&gt; Bob: message 2
Bob --&gt; Alice: ok
||45||
Alice -&gt; Bob: message 3
Bob --&gt; Alice: ok
</code></pre>
<hr>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/media/14508871765386/14508885743513.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<pre><code class="uml">
participant User

User -&gt; A: DoWork
activate A

A -&gt; B: &lt;&lt; createRequest &gt;&gt;
activate B

B -&gt; C: DoWork
activate C
C --&gt; B: WorkDone
destroy C

B --&gt; A: RequestCreated
deactivate B

A -&gt; User: Done
deactivate A
</code></pre>
<hr>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/media/14508871765386/14508886169018.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<pre><code class="uml">
participant User

User -&gt; A: DoWork
activate A #FFBBBB

A -&gt; A: Internal call
activate A #DarkSalmon

A -&gt; B: &lt;&lt; createRequest &gt;&gt;
activate B

B --&gt; A: RequestCreated
deactivate B
deactivate A
A -&gt; User: Done
deactivate A
</code></pre>
<hr>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/media/14508871765386/14508886596930.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<pre><code class="uml">
Bob -&gt; Alice : hello

create Other
Alice -&gt; Other : new

create control String
Alice -&gt; String
note right : You can also put notes!

Alice --&gt; Bob : ok
</code></pre>
<hr>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/media/14508871765386/14508887046884.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<pre><code class="uml">
[-&gt; A: DoWork

activate A

A -&gt; A: Internal call
activate A

A -&gt;] : &lt;&lt; createRequest &gt;&gt;

A&lt;--] : RequestCreated
deactivate A
[&lt;- A: Done
deactivate A
</code></pre>
<hr>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/media/14508871765386/14508887563841.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<pre><code class="uml">
[-&gt; Bob
[o-&gt; Bob
[o-&gt;o Bob
[x-&gt; Bob

[&lt;- Bob
[x&lt;- Bob

Bob -&gt;]
Bob -&gt;o]
Bob o-&gt;o]
Bob -&gt;x]

Bob &lt;-]
Bob x&lt;-]
</code></pre>
<hr>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/media/14508871765386/14508872101419.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<pre><code class="uml">@startuml

/&#39;
This is an example Sequence diagram
Showing a fictional web feature flow
It is easy to see roles &amp; responsibilities for each component
and easy to change them too...
&#39;/

title &quot;Story Feature Example - Sequence Diagram&quot;

&#39;This is a single line comment

/&#39;
This is a multi-line comment
One another line
&#39;/

actor User
&#39;boundary Proxy
participant UIServer as UI
participant API

User -&gt; UI: LINK: goto /account page
activate UI
UI -&gt; User:
deactivate UI

activate User
note over User
  Requirments:
  UI: Setting Page
  Click delete button
end note

&#39; user requests account/delete page
User -&gt; UI: /account/delete
deactivate User
activate UI
UI -&gt; User:
deactivate UI

&#39; confirmation form
activate User
note over User
  UI: Form
  Are you sure?
end note


User -&gt; UI: POST /account/delete
deactivate User
activate UI

note over UI: Verify: user has confirmed
UI -&gt; API: /account/delete
activate API
API -&gt; API: delete
API -&gt; UI: done
deactivate API
UI -&gt; User: success
deactivate UI

@enduml
</code></pre>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                    &lt;img src=&quot;/media/14508871765386/14508873043317.jpg&quot; alt=&quot;&quot; title=&quot;&quot;&gt;
                &lt;/div&gt;
                &lt;div class=&quot;image-caption&quot;&gt;&lt;/div&gt;
            &lt;/figure&gt;
&lt;pre&gt;&lt;code class=&quot;uml&quot;&gt;
Alice -&amp;gt; Bob: Authentication Request
Bob --&amp;gt; Alice: Authentication Response

Alice -&amp;gt; Bob: Another authentication Request
Alice &amp;lt;-- Bob: another authentication Response
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="UML" scheme="http://clarence-pan.github.io/categories/UML/"/>
    
    
      <category term="PlantUML" scheme="http://clarence-pan.github.io/tags/PlantUML/"/>
    
      <category term="UML" scheme="http://clarence-pan.github.io/tags/UML/"/>
    
  </entry>
  
  <entry>
    <title>使用PHPUnit + Selenium进行自动化测试</title>
    <link href="http://clarence-pan.github.io/2015/12/22/how-to-use-phpunit-selenium-test/"/>
    <id>http://clarence-pan.github.io/2015/12/22/how-to-use-phpunit-selenium-test/</id>
    <published>2015-12-22T00:00:00.000Z</published>
    <updated>2017-07-05T03:30:06.651Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一步，安装PHPUnit"><a href="#第一步，安装PHPUnit" class="headerlink" title="第一步，安装PHPUnit"></a>第一步，安装PHPUnit</h2><p>最简单的方式莫过于到<a href="https://phpunit.de/" target="_blank" rel="external">PHPUnit的官网</a>下载PHPUnit，然后把那个下载了的<code>phpunit.phar</code>加到<code>PATH</code>中。</p>
<a id="more"></a>
<p>此外，还可以通过 <code>pear</code> 来安装phpunit:</p>
<pre><code class="sh">pear clear-cache  
pear channel-discover pear.phpunit.de  
pear channel-discover components.ez.no  
pear channel-discover pear.symfony-project.com  
pear install -a -f  phpunit/PHPUnit
</code></pre>
<p>参考：<a href="http://www.cnblogs.com/wanfox/p/4613517.html" target="_blank" rel="external">http://www.cnblogs.com/wanfox/p/4613517.html</a><br>然而使用 <code>pear</code> 安装方式，我却是没有成功！大概是因为天朝的神奇的GFW吧！</p>
<p>补记：还能通过<code>composer</code>来安装:</p>
<pre><code class="sh">composer require phpunit/phpunit
</code></pre>
<h2 id="第二步，下载Selenium-Standalone-Server"><a href="#第二步，下载Selenium-Standalone-Server" class="headerlink" title="第二步，下载Selenium Standalone Server"></a>第二步，下载Selenium Standalone Server</h2><p>传送门：<a href="http://docs.seleniumhq.org/download/" target="_blank" rel="external">http://docs.seleniumhq.org/download/</a><br>传送门2： <a href="https://selenium-release.storage.googleapis.com/index.html?path=2.48/" target="_blank" rel="external">https://selenium-release.storage.googleapis.com/index.html?path=2.48/</a><br>下载下来一般是一个<code>selenium-server-standalone-2.48.2.jar</code>这样的文件（版本号可能会有所更新）。</p>
<h2 id="第三步，下载WebDriver-for-Chrome"><a href="#第三步，下载WebDriver-for-Chrome" class="headerlink" title="第三步，下载WebDriver for Chrome"></a>第三步，下载WebDriver for Chrome</h2><p>传送门： <a href="https://sites.google.com/a/chromium.org/chromedriver/downloads" target="_blank" rel="external">https://sites.google.com/a/chromium.org/chromedriver/downloads</a><br>这个要根据电脑是Windows、Linux还是MAC，来下载相应的驱动，并解压缩。</p>
<p>补记：如下载不了，还可以到百度云下载 <a href="http://pan.baidu.com/s/1mirOYIc" target="_blank" rel="external">http://pan.baidu.com/s/1mirOYIc</a></p>
<h2 id="第四步，启动Server"><a href="#第四步，启动Server" class="headerlink" title="第四步，启动Server"></a>第四步，启动Server</h2><p>前面两步的东西都下载好了，就可以启动这个server了：</p>
<pre><code class="sh"># 假设1：已经装了java, 而且将java加到了PATH中
# 假设2：前面两步下载的东东都在当前目录下
java -jar selenium-server-standalone-2.42.2.jar -Dwebdriver.chrome.driver=./chromedriver
</code></pre>
<p>p.s. 对于Windows的用户，后面的<code>./chromedriver</code>需要修改为<code>.\chromedriver.exe</code></p>
<p>补记：对于从百度云上下载的用户，直接双击<code>start-server.bat</code>即可运行</p>
<h2 id="第四步，下载PHP的WebDriver封装库"><a href="#第四步，下载PHP的WebDriver封装库" class="headerlink" title="第四步，下载PHP的WebDriver封装库"></a>第四步，下载PHP的WebDriver封装库</h2><p>本人喜欢使用<a href="https://github.com/facebook/PHP-webdriver" target="_blank" rel="external">Facebook出品的这个库</a>.</p>
<p>这个库可以直接用composer加载： <code>composer require facebook/webdriver</code></p>
<p>鉴于composer在国内的悲惨现状，还是直接下载zip包，然后自行加载吧。<br>下面是我常用的自动加载器：</p>
<pre><code class="PHP">// file: tests/bootstrap.PHP

call_user_func(function(){
    $namespaces = array(
        &#39;Facebook\WebDriver&#39; =&gt;  __DIR__.&#39;/../PHP-webdriver/lib&#39;,
    );

    spl_autoload_register(function($class) use ($namespaces){
        $class = ltrim($class, &#39;\\&#39;);
        foreach ($namespaces as $ns =&gt; $dir) {
            if (strncmp($class, $ns, strlen($ns)) === 0){
                $file = str_replace(&#39;\\&#39;, DIRECTORY_SEPARATOR, $dir . DIRECTORY_SEPARATOR . ltrim(substr($class, strlen($ns)), &#39;\\&#39;)) . &#39;.PHP&#39;;
                if (is_file($file)){
                    include_once($file);
                }
            }
        }
    });
});
</code></pre>
<p>这个自动加载器可以放到<code>bootstrap.PHP</code>中，以便phpunit跑用例前加载。</p>
<h2 id="第五步，编写一个简单的测试用例"><a href="#第五步，编写一个简单的测试用例" class="headerlink" title="第五步，编写一个简单的测试用例"></a>第五步，编写一个简单的测试用例</h2><p>下面这个测试用例测试下百度是否能正常打开，检查百度的标题和URL是否符合预期。</p>
<pre><code class="PHP">// file: tests/sample/BaiduTest.PHP

class BaiduTest extends PHPUnit_Framework_TestCase
{
    public function testTheTitleUrl()
    {

        // 创建一个浏览器
        $browser = create_browser();

        // 打开百度
        $browser-&gt;get(&#39;https://www.baidu.com/&#39;);

        // 检查下标题
        $this-&gt;assertEquals(&#39;百度一下，你就知道&#39;, $browser-&gt;getTitle());

        // 检查下URL
        $this-&gt;assertEquals(&#39;https://www.baidu.com/&#39;, $browser-&gt;getCurrentURL());

        // 搜索&quot;Hello&quot;
        $keywordInput = $browser-&gt;findElement(By::id(&#39;kw&#39;));
        $this-&gt;assertNotEmpty($keywordInput);
        $keywordInput-&gt;sendKeys(&#39;Hello&#39;);

        $searchBtn = $browser-&gt;findElement(By::id(&#39;su&#39;));
        $this-&gt;assertNotEmpty($searchBtn);

        $searchBtn-&gt;click();

        // 等待结果
        $browser-&gt;wait()-&gt;until(Expect::titleContains(&#39;Hello&#39;));

        // 检查结果
        $keywordInput = $browser-&gt;findElement(By::id(&#39;kw&#39;));
        $this-&gt;assertNotEmpty($keywordInput);
        $this-&gt;assertEquals(&#39;Hello&#39;, $keywordInput-&gt;getAttribute(&#39;value&#39;));

        // 为了演示，留个时间看看结果
        sleep(3);

        // 关闭浏览器
        $browser-&gt;quit();
    }
}
</code></pre>
<p>注意：文件名和类名要以Test结尾，而其中的测试函数要以test开头，这样子方便phpunit查找测试用例。</p>
<p>此外，其中<code>create_browser</code>是放在<code>bootstrap.PHP</code>中的一个辅助函数：</p>
<pre><code class="PHP">use Facebook\WebDriver\Remote\DesiredCapabilities;
use Facebook\WebDriver\Remote\RemoteWebDriver;

/**
 * @return RemoteWebDriver
 */
function create_browser(){
    return RemoteWebDriver::create(&#39;http://localhost:4444/wd/hub&#39;,
                                    DesiredCapabilities::chrome(),
                                    5000);
}
</code></pre>
<h2 id="第六步，跑一下测试用例试试"><a href="#第六步，跑一下测试用例试试" class="headerlink" title="第六步，跑一下测试用例试试"></a>第六步，跑一下测试用例试试</h2><pre><code class="sh">phpunit --bootstrap tests/bootstrap.PHP tests/sample/BaiduTest.PHP
</code></pre>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/media/14506919847650/14507168650007.jpg" alt="screen_w600" title="">
                </div>
                <div class="image-caption">screen_w600</div>
            </figure>
<p>Nice~ 成功跑通~</p>
<h2 id="最后，用phpunit-xml定义测试套，跑起来更便捷"><a href="#最后，用phpunit-xml定义测试套，跑起来更便捷" class="headerlink" title="最后，用phpunit.xml定义测试套，跑起来更便捷~"></a>最后，用<code>phpunit.xml</code>定义测试套，跑起来更便捷~</h2><p>老是敲那么一长串的命令也挺麻烦的，要是能像<code>make</code>一样只要敲一个<code>make</code>就搞定就好了 —— phpunit刚好提供了一个<code>phpunit.xml</code>让我们能定义常用的测试套之类的选项。</p>
<p>详细的介绍在<a href="https://phpunit.de/manual/current/zh_cn/appendixes.configuration.html" target="_blank" rel="external">官方文档</a>中已经很详细了，我这里就不啰嗦了。只秀个我认为较为简洁有效的配置：</p>
<pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;phpunit
        backupGlobals               = &quot;false&quot;
        backupStaticAttributes      = &quot;false&quot;
        colors                      = &quot;true&quot;
        convertErrorsToExceptions   = &quot;true&quot;
        convertNoticesToExceptions  = &quot;true&quot;
        convertWarningsToExceptions = &quot;true&quot;
        processIsolation            = &quot;false&quot;
        stopOnFailure               = &quot;false&quot;
        syntaxCheck                 = &quot;false&quot;
        bootstrap                   = &quot;tests/bootstrap.PHP&quot; &gt;

    &lt;testsuites&gt;
        &lt;testsuite&gt;
            &lt;directory&gt;tests/sample&lt;/directory&gt;
        &lt;/testsuite&gt;
        &lt;!-- ... --&gt;
    &lt;/testsuites&gt;
&lt;/phpunit&gt;
</code></pre>
<p>把上述内容写入<code>phpunit.xml</code>中后，跑phpunit就变得非常简单了，一个<code>phpunit</code>就搞定了：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/media/14506919847650/14507172828168.jpg" alt="screen_w600" title="">
                </div>
                <div class="image-caption">screen_w600</div>
            </figure></p>
<p>Well done. 收工~</p>
<p>另附完整的示例代码： <a href="http://pan.baidu.com/s/1mirOYIc" target="_blank" rel="external">http://pan.baidu.com/s/1mirOYIc</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第一步，安装PHPUnit&quot;&gt;&lt;a href=&quot;#第一步，安装PHPUnit&quot; class=&quot;headerlink&quot; title=&quot;第一步，安装PHPUnit&quot;&gt;&lt;/a&gt;第一步，安装PHPUnit&lt;/h2&gt;&lt;p&gt;最简单的方式莫过于到&lt;a href=&quot;https://phpunit.de/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PHPUnit的官网&lt;/a&gt;下载PHPUnit，然后把那个下载了的&lt;code&gt;phpunit.phar&lt;/code&gt;加到&lt;code&gt;PATH&lt;/code&gt;中。&lt;/p&gt;
    
    </summary>
    
      <category term="Selenium" scheme="http://clarence-pan.github.io/categories/Selenium/"/>
    
    
      <category term="Selenium" scheme="http://clarence-pan.github.io/tags/Selenium/"/>
    
      <category term="PHPUnit" scheme="http://clarence-pan.github.io/tags/PHPUnit/"/>
    
      <category term="Test" scheme="http://clarence-pan.github.io/tags/Test/"/>
    
  </entry>
  
  <entry>
    <title>【转】使用Sublime + PlantUML高效地画图</title>
    <link href="http://clarence-pan.github.io/2015/12/17/how-to-use-sublime-and-plant-uml-draw-diagram/"/>
    <id>http://clarence-pan.github.io/2015/12/17/how-to-use-sublime-and-plant-uml-draw-diagram/</id>
    <published>2015-12-17T00:00:00.000Z</published>
    <updated>2017-07-05T03:30:06.651Z</updated>
    
    <content type="html"><![CDATA[<p>转自: <a href="http://www.jianshu.com/p/e92a52770832" target="_blank" rel="external">http://www.jianshu.com/p/e92a52770832</a> （侵立删）</p>
<blockquote>
<p>程序员难免要经常画流程图，状态图，时序图等。以前经常用 visio 画，经常为矩形画多大，摆放在哪等问题费脑筋。有时候修改文字后，为了较好的显示效果不得不再去修改图形。今天介绍的工具是如何使用 Sublime + PlantUML 的插件画流程图，状态图，时序图等。这是一种程序员看了就会爱上的画图方式：自然，高效。</p>
</blockquote>
<a id="more"></a>
<h2 id="什么是-PlantUML"><a href="#什么是-PlantUML" class="headerlink" title="什么是 PlantUML"></a>什么是 PlantUML</h2><p>PlantUML 是一个画图脚本语言，用它可以快速地画出：</p>
<ul>
<li>时序图</li>
<li>流程图</li>
<li>用例图</li>
<li>状态图</li>
<li>组件图</li>
</ul>
<p>简单地讲，我们使用 visio 画图时需要一个一个图去画，但使用 PlantUML 只需要用文字表达出图的内容，然后就可以直接生成图片。看一个最简单的例子：</p>
<pre><code>Bob -&gt; Alice : Hello, how are you
Alice -&gt; Bob : Fine, thank you, and you?
</code></pre><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/media/14502448425847/14503279393310.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><p>这些软件全部是开源或共享软件，不存在版权问题，可以放心使用。</p>
<h3 id="安装-Sublime"><a href="#安装-Sublime" class="headerlink" title="安装 Sublime"></a>安装 Sublime</h3><p>Sublime 是个强大的可扩展的文本编辑器。进入<a href="http://www.sublimetext.com/" target="_blank" rel="external">官网</a>下载对应操作系统下的版本安装即可。</p>
<h3 id="安装-graphviz"><a href="#安装-graphviz" class="headerlink" title="安装 graphviz"></a>安装 <a href="http://graphviz.org/" target="_blank" rel="external">graphviz</a></h3><p>graphviz 是个开源的图片渲染库。安装了这个库才能在 Windows 下实现把 PlantUML 脚本转换为图片。</p>
<h3 id="安装-PlantUML-for-Sublime-插件"><a href="#安装-PlantUML-for-Sublime-插件" class="headerlink" title="安装 PlantUML for Sublime 插件"></a>安装 PlantUML for Sublime 插件</h3><p>有了这个插件后，我们就可以在 Sublime 里写 PlantUML 脚本，然后直接通过一个快捷键生成图片。安装步骤如下</p>
<ul>
<li><a href="https://github.com/jvantuyl/sublime_diagram_plugin/tarball/master" target="_blank" rel="external">下载插件</a>，并解压</li>
<li>通过 Preferences -&gt; Browse Packages ... 打开 sublime 的 Packages 目录，解压后的插件放在 Packages 目录下</li>
<li>重启 Sublime</li>
</ul>
<p>为了简化使用，可以在 Sublime 里配置个快捷键。打开 Preferences -&gt; Key Binding - User，添加一个快捷键：</p>
<pre><code class="json">{ &quot;keys&quot;: [&quot;alt+d&quot;], &quot;command&quot;: &quot;display_diagrams&quot;}
</code></pre>
<p>上面的代码配置成按住 Alt + d 来生成 PlantUML 图片，你可以修改成你自己喜欢的按键。</p>
<h3 id="效果检验"><a href="#效果检验" class="headerlink" title="效果检验"></a>效果检验</h3><p>最后检验一下工作安装是否正确。打开 Sublime 输入：</p>
<pre><code>Bob -&gt; Alice : Hello, how are you
Alice -&gt; Bob : Fine, thank you, and you?
</code></pre><p>选中这些文本内容，按 Alt + d 会在当前工作目录下生成这个图片文件，同时自动弹出窗口显示图片。</p>
<h2 id="PlantULM-快速入门"><a href="#PlantULM-快速入门" class="headerlink" title="PlantULM 快速入门"></a>PlantULM 快速入门</h2><h3 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h3><pre><code>@startuml

title 时序图

== 鉴权阶段 ==

Alice -&gt; Bob: 请求
Bob -&gt; Alice: 应答

== 数据上传 ==

Alice -&gt; Bob: 上传数据
note left: 这是显示在左边的备注

Bob --&gt; Canny: 转交数据
... 不超过 5 秒钟 ...
Canny --&gt; Bob: 状态返回
note right: 这是显示在右边的备注

Bob -&gt; Alice: 状态返回

== 状态显示 ==

Alice -&gt; Alice: 给自己发消息

@enduml
</code></pre><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/media/14502448425847/14503280649385.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>TIPS：</p>
<ul>
<li>使用 title 来指定标题</li>
<li>&#39;-&gt;&#39; 和 &#39;--&gt;&#39; 来指示线条的形式</li>
<li>在每个时序后面加冒号 : 来添加注释</li>
<li>使用 note 来显示备注，备注可以指定显示在左边或右边</li>
<li>使用 == xxx == 来分隔时序图</li>
<li>使用 ... 来表示延迟省略号</li>
<li>节点可以给自己发送消息，方法是发送方和接收方使用同一个主体即可</li>
</ul>
<h3 id="用例图"><a href="#用例图" class="headerlink" title="用例图"></a>用例图</h3><pre><code>@startuml

left to right direction
actor 消费者
actor 销售员
rectangle 买单 {
消费者 -- (买单)
(买单) .&gt; (付款) : include
(帮助) .&gt; (买单) : extends
(买单) -- 销售员
}

@enduml
</code></pre><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/media/14502448425847/14503281085851.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>TIPS：</p>
<ul>
<li>用例图<ul>
<li>用例图是指由参与者（Actor）、用例（Use Case）以及它们之间的关系构成的用于描述系统功能的静态视图</li>
<li><a href="http://baike.baidu.com/view/1281729.htm" target="_blank" rel="external">百度百科</a>上有简易的入门资料，其中用例之间的关系 (include, extends) 是关键</li>
</ul>
</li>
<li>使用 actor 来定义参与者</li>
<li>使用括号 (xxx) 来表示用例，用例用椭圆形表达</li>
<li>使用不同的线条表达不同的关系。包括参与者与用例的关系，用例与用例的关系</li>
</ul>
<h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><pre><code>@startuml

title 流程图

(*) --&gt; &quot;步骤1处理&quot;
--&gt; &quot;步骤2处理&quot;
if &quot;条件1判断&quot; then
    -&gt;[true] &quot;条件1成立时执行的动作&quot;
    if &quot;分支条件2判断&quot; then
        -&gt;[no] &quot;条件2不成立时执行的动作&quot;
        -&gt; === 中间流程汇总点1 ===
    else
        --&gt;[yes] === 中间流程汇总点1 ===
    endif
    if &quot;分支条件3判断&quot; then
        --&gt;[yes] &quot;分支条件3成立时执行的动作&quot;
        --&gt; &quot;Page.onRender ()&quot; as render
        --&gt; === REDIRECT_CHECK ===
    else
        --&gt;[no] &quot;分支条件3不成立时的动作&quot;
        --&gt; render
    endif
else
    --&gt;[false] === REDIRECT_CHECK ===
endif

if &quot;条件4判断&quot; then
    -&gt;[yes] &quot;条件4成立时执行的动作&quot;
    --&gt; &quot;流程最后结点&quot;
else
endif
--&gt; &quot;流程最后结点&quot;
--&gt;(*)

@enduml
</code></pre><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/media/14502448425847/14503281621060.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>上面的流程图写的时候还是挺直观的，但画出来的图片渲染效果不好，对逻辑的显示不清楚。由于这个原因 PlantUML 实现了另外版本的流程图脚本。</p>
<p>下面是 PlantUML 支持的新版本的流程图脚本，从使用角度来讲，更直观，画出来的图片也更漂亮，推荐使用。</p>
<pre><code>@startuml

start
:&quot;步骤1处理&quot;;
:&quot;步骤2处理&quot;;
if (&quot;条件1判断&quot;) then (true)
    :条件1成立时执行的动作;
    if (&quot;分支条件2判断&quot;) then (no)
        :&quot;条件2不成立时执行的动作&quot;;
    else
        if (&quot;条件3判断&quot;) then (yes)
            :&quot;条件3成立时的动作&quot;;
        else (no)
            :&quot;条件3不成立时的动作&quot;;
        endif
    endif
    :&quot;顺序步骤3处理&quot;;
endif

if (&quot;条件4判断&quot;) then (yes)
:&quot;条件4成立的动作&quot;;
else
    if (&quot;条件5判断&quot;) then (yes)
        :&quot;条件5成立时的动作&quot;;
    else (no)
        :&quot;条件5不成立时的动作&quot;;
    endif
endif
stop
@enduml
</code></pre><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/media/14502448425847/14503281936249.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>TIPS：</p>
<ul>
<li>使用 start 来表示流程开始，使用 stop 来表示流程结束</li>
<li>顺序流程使用冒号和分号 :xxx; 来表示</li>
<li>条件语句使用 if (&quot;condition 1&quot;) then (true/yes/false/no) 来表示</li>
<li>条件语句可以嵌套</li>
</ul>
<h3 id="组件图"><a href="#组件图" class="headerlink" title="组件图"></a>组件图</h3><p>我们经常使用组件图来画部署视图，或者用来画系统的拓扑结构图。</p>
<pre><code>@startuml

package &quot;组件1&quot; {
    [&quot;组件1.1&quot;] - [&quot;组件1.2&quot;]
    [&quot;组件1.2&quot;] -&gt; [&quot;组件2.1&quot;]
}

node &quot;组件2&quot; {
    [&quot;组件2.1&quot;] - [&quot;组件2.2&quot;]
    [&quot;组件2.2&quot;] --&gt; [负载均衡服务器]
}

cloud {
    [负载均衡服务器] -&gt; [逻辑服务器1]
    [负载均衡服务器] -&gt; [逻辑服务器2]
    [负载均衡服务器] -&gt; [逻辑服务器3]
}

database &quot;MySql&quot; {
    folder &quot;This is my folder&quot; {
        [Folder 3]
    }

    frame &quot;Foo&quot; {
        [Frame 4]
    }
}

[逻辑服务器1] --&gt; [Folder 3]
[逻辑服务器2] --&gt; [Frame 4]
[逻辑服务器3] --&gt; [Frame 4]

@enduml
</code></pre><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/media/14502448425847/14503282235917.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>TIPS:</p>
<ul>
<li>使用方括号 [xxx] 来表示组件</li>
<li>可以把几个组件合并成一个包，可以使用的关键字为 package, node, folder, frame, cloud, database。不同的关键字图形不一样。</li>
<li>可以在包内部用不同的箭头表达同一个包的组件之间的关系</li>
<li>可以在包内部直接表达到另外一个包内部的组件的交互关系</li>
<li>可以在流程图外部直接表达包之间或包的组件之间的交互关系</li>
</ul>
<h3 id="状态图"><a href="#状态图" class="headerlink" title="状态图"></a>状态图</h3><p>我们一般使用状态图来画状态机。</p>
<pre><code>@startuml

scale 640 width

[*] --&gt; NotShooting

state NotShooting {
    [*] --&gt; Idle
    Idle --&gt; Processing: SignalEvent
    Processing --&gt; Idle: Finish
    Idle --&gt; Configuring : EvConfig
    Configuring --&gt; Idle : EvConfig
}

state Configuring {
    [*] --&gt; NewValueSelection
    NewValueSelection --&gt; NewValuePreview : EvNewValue
    NewValuePreview --&gt; NewValueSelection : EvNewValueRejected
    NewValuePreview --&gt; NewValueSelection : EvNewValueSaved
    state NewValuePreview {
        State1 -&gt; State2
    }
}

@enduml
</code></pre><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/media/14502448425847/14503282579782.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>TIPS:</p>
<ul>
<li>使用 [*] 来表示状态的起点</li>
<li>使用 state 来定义子状态图</li>
<li>状态图可以嵌套</li>
<li>使用 scale 命令来指定生成的图片的尺寸</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>不需要去记这些标记，在需要的时候去使用它，通过不断地使用来熟悉不同的图的语法。可以下载 <a href="http://plantuml.com/PlantUML_Language_Reference_Guide.pdf" target="_blank" rel="external">PlanUML 官方文档</a> 作为参考，遇到问题的时候翻一翻，这样很快就可以学会使用 PlantUML 高效地画图。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转自: &lt;a href=&quot;http://www.jianshu.com/p/e92a52770832&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jianshu.com/p/e92a52770832&lt;/a&gt; （侵立删）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;程序员难免要经常画流程图，状态图，时序图等。以前经常用 visio 画，经常为矩形画多大，摆放在哪等问题费脑筋。有时候修改文字后，为了较好的显示效果不得不再去修改图形。今天介绍的工具是如何使用 Sublime + PlantUML 的插件画流程图，状态图，时序图等。这是一种程序员看了就会爱上的画图方式：自然，高效。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="UML" scheme="http://clarence-pan.github.io/categories/UML/"/>
    
    
      <category term="sublime" scheme="http://clarence-pan.github.io/tags/sublime/"/>
    
      <category term="PlantUML" scheme="http://clarence-pan.github.io/tags/PlantUML/"/>
    
      <category term="UML" scheme="http://clarence-pan.github.io/tags/UML/"/>
    
      <category term="diagram" scheme="http://clarence-pan.github.io/tags/diagram/"/>
    
  </entry>
  
  <entry>
    <title>在MAC OS X上如何启用crontab？</title>
    <link href="http://clarence-pan.github.io/2015/12/16/how-to-enable-crontab-on-osx/"/>
    <id>http://clarence-pan.github.io/2015/12/16/how-to-enable-crontab-on-osx/</id>
    <published>2015-12-16T00:00:00.000Z</published>
    <updated>2017-07-05T03:30:06.651Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>本本上又一些东东是比较重要的，我使用了git进行管理，从而可以将其备份到某个git仓库上。可是鄙人喜欢偷懒，不喜欢老是手动执行备份的一系列命令，于是乎我就想到了写个备份脚本，想通过 crontab 来定期备份。</p>
<a id="more"></a>
<p>脚本写好了，也加了一条crontab：</p>
<pre><code class="sh"># m h  dom mon dow   command
30 11,17 * * * /Users/clarence/bin/daily-backup
</code></pre>
<p>可是，为啥到点没有执行呢？<br>问了下度娘和谷哥，结果很多文章都是关于如何用OS X现在自带的 launchctl 来执行定时任务的。可是呢，鄙人这个脚本是像每天上午和下午都要执行的，用 launchctl 来搞的话有点嫌麻烦。故今天非要探究下如何启用crontab。结果不一会儿就找到了原因，现分享如下：</p>
<h2 id="如何启用crontab"><a href="#如何启用crontab" class="headerlink" title="如何启用crontab"></a>如何启用crontab</h2><p>首先，既然OS X的定时任务统统都由 launchctl 来管理了，就看看 cron 任务有没有在里面：</p>
<pre><code class="sh">$  LaunchAgents  sudo launchctl list | grep cron
83968    0    com.vix.cron
</code></pre>
<p>果然在里面。那就检查下这个启动项的配置：</p>
<pre><code class="sh">$  LaunchAgents  locate com.vix.cron
/System/Library/LaunchDaemons/com.vix.cron.plist
$  LaunchAgents  cat /System/Library/LaunchDaemons/com.vix.cron.plist
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE plist PUBLIC &quot;-//Apple Computer//DTD PLIST 1.0//EN&quot;
    &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;
&lt;plist version=&quot;1.0&quot;&gt;
&lt;dict&gt;
    &lt;key&gt;Label&lt;/key&gt;
    &lt;string&gt;com.vix.cron&lt;/string&gt;
    &lt;key&gt;ProgramArguments&lt;/key&gt;
    &lt;array&gt;
        &lt;string&gt;/usr/sbin/cron&lt;/string&gt;
    &lt;/array&gt;
    &lt;key&gt;KeepAlive&lt;/key&gt;
    &lt;dict&gt;
        &lt;key&gt;PathState&lt;/key&gt;
        &lt;dict&gt;
            &lt;key&gt;/etc/crontab&lt;/key&gt;
            &lt;true/&gt;
        &lt;/dict&gt;
    &lt;/dict&gt;
    &lt;key&gt;QueueDirectories&lt;/key&gt;
    &lt;array&gt;
        &lt;string&gt;/usr/lib/cron/tabs&lt;/string&gt;
    &lt;/array&gt;
    &lt;key&gt;EnableTransactions&lt;/key&gt;
    &lt;true/&gt;
&lt;/dict&gt;
&lt;/plist&gt;
</code></pre>
<p>注意里面有个KeepAlive的条件是 <code>/etc/crontab</code> 是否存在：</p>
<pre><code class="xml">    &lt;key&gt;KeepAlive&lt;/key&gt;
    &lt;dict&gt;
        &lt;key&gt;PathState&lt;/key&gt;
        &lt;dict&gt;
            &lt;key&gt;/etc/crontab&lt;/key&gt;
            &lt;true/&gt;
        &lt;/dict&gt;
    &lt;/dict&gt;
</code></pre>
<p>所以呢，那就看看是否是因为这个 <code>/etc/crontab</code> 不存在导致 cron 里面的任务无法正常运行：</p>
<pre><code class="sh">$  LaunchAgents  ll /etc/crontab
ls: /etc/crontab: No such file or directory
</code></pre>
<p>果然，这个文件不存在。<br>那就创建吧！</p>
<pre><code class="sh">$  sudo touch /etc/crontab
</code></pre>
<p>再试试 cron 任务是否成功启动... 果然能成功启动了！</p>
<p>收工~</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;本本上又一些东东是比较重要的，我使用了git进行管理，从而可以将其备份到某个git仓库上。可是鄙人喜欢偷懒，不喜欢老是手动执行备份的一系列命令，于是乎我就想到了写个备份脚本，想通过 crontab 来定期备份。&lt;/p&gt;
    
    </summary>
    
      <category term="OS X" scheme="http://clarence-pan.github.io/categories/OS-X/"/>
    
      <category term="crontab" scheme="http://clarence-pan.github.io/categories/OS-X/crontab/"/>
    
    
      <category term="OS X" scheme="http://clarence-pan.github.io/tags/OS-X/"/>
    
      <category term="MAC" scheme="http://clarence-pan.github.io/tags/MAC/"/>
    
      <category term="crontab" scheme="http://clarence-pan.github.io/tags/crontab/"/>
    
      <category term="定时任务" scheme="http://clarence-pan.github.io/tags/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>安装PHP扩展</title>
    <link href="http://clarence-pan.github.io/2015/12/12/installing-php-extensions/"/>
    <id>http://clarence-pan.github.io/2015/12/12/installing-php-extensions/</id>
    <published>2015-12-12T16:08:49.000Z</published>
    <updated>2017-07-05T03:30:06.651Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>PHP 的扩展相当丰富，可是有些扩展安装起来并不是那么地顺利，谨以此文汇总下我曾经遇到过的问题。</p>
<a id="more"></a>
<p>由于PHP版本也是在不断地更新，某些问题的解决方案以后可能会失效，所以此文仅作参考。</p>
<p>若有发现某个解决方案失效了，还请见谅，并欢迎指出以便更正。</p>
<h2 id="pecl-pear的安装"><a href="#pecl-pear的安装" class="headerlink" title="pecl/pear的安装"></a>pecl/pear的安装</h2><p>使用pecl/pear可以很方便地安装一些PHP扩展。<br>下载go-pear: <a href="http://pear.PHP.net/go-pear.phar" target="_blank" rel="external">http://pear.PHP.net/go-pear.phar</a><br>然后执行这个phar文件：</p>
<pre><code class="sh">sudo PHP go-pear.phar
</code></pre>
<p>至于提示的目录设置，一般而言默认的就够用了。如需定制请自便。</p>
<p>安装好了后，建议将pear和pecl的目录加入到PATH中，或者可以加个软连接到path的某个目录中，以便以后使用，如：</p>
<pre><code class="sh">ln -s /usr/local/Cellar/php56/5.6.16/bin/pecl /usr/local/bin/
ln -s /usr/local/Cellar/php56/5.6.16/bin/pear /usr/local/bin/
</code></pre>
<h2 id="安装intl扩展"><a href="#安装intl扩展" class="headerlink" title="安装intl扩展"></a>安装intl扩展</h2><h3 id="使用包管理进行安装"><a href="#使用包管理进行安装" class="headerlink" title="使用包管理进行安装"></a>使用包管理进行安装</h3><p>在debian/ubuntu/centos上都有对应的包：php5-intl, 直接使用apt或yum来安装即可:</p>
<pre><code class="sh">sudo apt-get install -y php5-intl
</code></pre>
<p>可惜在 mac OS X 上并不能这样安装，只能通过pecl或源码安装</p>
<h3 id="使用pecl进行安装"><a href="#使用pecl进行安装" class="headerlink" title="使用pecl进行安装"></a>使用pecl进行安装</h3><pre><code class="sh">sudo pecl update-channels
sudo pecl install intl
</code></pre>
<p>如遇到询问icu的路径，则请寻找其路径并提供给安装程序，如：/usr/local/Cellar/icu4c/56.1</p>
<h3 id="从源码安装"><a href="#从源码安装" class="headerlink" title="从源码安装"></a>从源码安装</h3><p>下载地址： <a href="http://pecl.PHP.net/package/intl" target="_blank" rel="external">http://pecl.PHP.net/package/intl</a><br>下载最新版本，然后解压缩后：</p>
<pre><code class="sh">phpize
./configure
make
sudo make install
</code></pre>
<p>成功的安装将创建 intl.so 并放置于 PHP 的扩展库目录中。需要调整 PHP.ini，加入 extension=intl.so 这一行之后才能使用此扩展库。</p>
<h3 id="问题：icu-config找不到？"><a href="#问题：icu-config找不到？" class="headerlink" title="问题：icu-config找不到？"></a>问题：icu-config找不到？</h3><p>现象：</p>
<pre><code>checking for icu-config... no
checking for location of ICU headers and libraries... not found
configure: error: Unable to detect ICU prefix or no failed. Please verify ICU install prefix and make sure icu-config works.
</code></pre><p>解决方案：<br>对于debian/ubuntu/centos则可以安装下<code>icu libicu libicu-devel</code>：</p>
<pre><code class="sh">sudo apt-get install -y icu libicu libicu-devel
</code></pre>
<p>对于mac OS X则需要安装<code>icu4c</code>:</p>
<pre><code class="sh">brew install icu4c
</code></pre>
<p>然后再编译intl的时候提供这个icu的路径，如：</p>
<pre><code class="sh">cd path/to/intl-v3.0.0
./configure --with-icu-dir=/usr/local/Cellar/icu4c/56.1
</code></pre>
<p>注意：替换下版本号。</p>
<h2 id="安装mcrypt扩展"><a href="#安装mcrypt扩展" class="headerlink" title="安装mcrypt扩展"></a>安装mcrypt扩展</h2><p>mcrypt是一个功能很强大的加密算法扩展库，一般直接有这个的包</p>
<h3 id="使用包管理功能安装"><a href="#使用包管理功能安装" class="headerlink" title="使用包管理功能安装"></a>使用包管理功能安装</h3><pre><code class="sh"># for ubuntu/debian
sudo apt-get install php5-mcrypt

# for centos
sudo yum install libmcrypt libmcrypt-devel
sudo yum install PHP-mcrypt

# for OS X
brew install php56-mcrypt
</code></pre>
<h3 id="从源码安装-1"><a href="#从源码安装-1" class="headerlink" title="从源码安装"></a>从源码安装</h3><p>// TODO: 待续 -- 目前在安装其依赖的mhash的时候一直有问题还没解决</p>
<h2 id="一个常用的PHP编译配置参数"><a href="#一个常用的PHP编译配置参数" class="headerlink" title="一个常用的PHP编译配置参数"></a>一个常用的PHP编译配置参数</h2><pre><code class="sh">./configure --prefix=/usr/local/PHP\
 --with-libdir=lib64\
 --enable-fpm\
 --with-fpm-user=PHP-fpm\
 --with-fpm-group=www\
 --enable-mysqlnd\
 --with-mysql=mysqlnd\
 --with-mysqli=mysqlnd\
 --with-pdo-mysql=mysqlnd\
 --enable-opcache\
 --enable-pcntl\
 --enable-mbstring\
 --enable-soap\
 --enable-zip\
 --enable-calendar\
 --enable-bcmath\
 --enable-exif\
 --enable-ftp\
 --enable-intl\
 --with-openssl\
 --with-zlib\
 --with-curl\
 --with-gd\
 --with-zlib-dir=/usr/lib\
 --with-png-dir=/usr/lib\
 --with-jpeg-dir=/usr/lib\
 --with-gettext\
 --with-mhash\
 --with-ldap
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;PHP 的扩展相当丰富，可是有些扩展安装起来并不是那么地顺利，谨以此文汇总下我曾经遇到过的问题。&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://clarence-pan.github.io/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://clarence-pan.github.io/tags/PHP/"/>
    
      <category term="extension" scheme="http://clarence-pan.github.io/tags/extension/"/>
    
  </entry>
  
</feed>
